
Ejercicio_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004934  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004a40  08004a40  00005a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab4  08004ab4  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  08004ab4  08004ab4  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ab4  08004ab4  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ab4  08004ab4  00005ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ab8  08004ab8  00005ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004abc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000068  08004b24  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08004b24  000062a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef72  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002941  00000000  00000000  00015003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00017948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b77  00000000  00000000  00018818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a67  00000000  00000000  0001938f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012930  00000000  00000000  00032df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009136e  00000000  00000000  00045726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6a94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043dc  00000000  00000000  000d6ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000daeb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a28 	.word	0x08004a28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004a28 	.word	0x08004a28

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	@ (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2201      	movs	r2, #1
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f000 fcc1 	bl	8000b10 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 f98e 	bl	80004b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000198:	2300      	movs	r3, #0
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80001a0:	2307      	movs	r3, #7
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	@ (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f000 ff13 	bl	8000fd4 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 f97e 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000084 	.word	0x20000084
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a18      	ldr	r2, [pc, #96]	@ (8000244 <HAL_ADC_MspInit+0x7c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d129      	bne.n	800023c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b17      	ldr	r3, [pc, #92]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a16      	ldr	r2, [pc, #88]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b14      	ldr	r3, [pc, #80]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b11      	ldr	r3, [pc, #68]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a10      	ldr	r2, [pc, #64]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0e      	ldr	r3, [pc, #56]	@ (8000248 <HAL_ADC_MspInit+0x80>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000218:	2301      	movs	r3, #1
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4809      	ldr	r0, [pc, #36]	@ (800024c <HAL_ADC_MspInit+0x84>)
 8000228:	f001 fa30 	bl	800168c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800022c:	2200      	movs	r2, #0
 800022e:	2100      	movs	r1, #0
 8000230:	2012      	movs	r0, #18
 8000232:	f001 f942 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000236:	2012      	movs	r0, #18
 8000238:	f001 f95b 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800023c:	bf00      	nop
 800023e:	3720      	adds	r7, #32
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40012400 	.word	0x40012400
 8000248:	40021000 	.word	0x40021000
 800024c:	40010800 	.word	0x40010800

08000250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000250:	b480      	push	{r7}
 8000252:	b085      	sub	sp, #20
 8000254:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000256:	4b14      	ldr	r3, [pc, #80]	@ (80002a8 <MX_GPIO_Init+0x58>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	4a13      	ldr	r2, [pc, #76]	@ (80002a8 <MX_GPIO_Init+0x58>)
 800025c:	f043 0320 	orr.w	r3, r3, #32
 8000260:	6193      	str	r3, [r2, #24]
 8000262:	4b11      	ldr	r3, [pc, #68]	@ (80002a8 <MX_GPIO_Init+0x58>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	f003 0320 	and.w	r3, r3, #32
 800026a:	60fb      	str	r3, [r7, #12]
 800026c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026e:	4b0e      	ldr	r3, [pc, #56]	@ (80002a8 <MX_GPIO_Init+0x58>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	4a0d      	ldr	r2, [pc, #52]	@ (80002a8 <MX_GPIO_Init+0x58>)
 8000274:	f043 0304 	orr.w	r3, r3, #4
 8000278:	6193      	str	r3, [r2, #24]
 800027a:	4b0b      	ldr	r3, [pc, #44]	@ (80002a8 <MX_GPIO_Init+0x58>)
 800027c:	699b      	ldr	r3, [r3, #24]
 800027e:	f003 0304 	and.w	r3, r3, #4
 8000282:	60bb      	str	r3, [r7, #8]
 8000284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000286:	4b08      	ldr	r3, [pc, #32]	@ (80002a8 <MX_GPIO_Init+0x58>)
 8000288:	699b      	ldr	r3, [r3, #24]
 800028a:	4a07      	ldr	r2, [pc, #28]	@ (80002a8 <MX_GPIO_Init+0x58>)
 800028c:	f043 0308 	orr.w	r3, r3, #8
 8000290:	6193      	str	r3, [r2, #24]
 8000292:	4b05      	ldr	r3, [pc, #20]	@ (80002a8 <MX_GPIO_Init+0x58>)
 8000294:	699b      	ldr	r3, [r3, #24]
 8000296:	f003 0308 	and.w	r3, r3, #8
 800029a:	607b      	str	r3, [r7, #4]
 800029c:	687b      	ldr	r3, [r7, #4]

}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	40021000 	.word	0x40021000

080002ac <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 100);
 80002b4:	1d39      	adds	r1, r7, #4
 80002b6:	2364      	movs	r3, #100	@ 0x64
 80002b8:	2201      	movs	r2, #1
 80002ba:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__io_putchar+0x20>)
 80002bc:	f002 fea7 	bl	800300e <HAL_UART_Transmit>
	return ch;
 80002c0:	687b      	ldr	r3, [r7, #4]
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	20000108 	.word	0x20000108

080002d0 <map>:

uint16_t map( uint16_t x, uint16_t min_int, uint16_t max_int, uint16_t min_out, uint16_t max_out )
{
 80002d0:	b490      	push	{r4, r7}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4604      	mov	r4, r0
 80002d8:	4608      	mov	r0, r1
 80002da:	4611      	mov	r1, r2
 80002dc:	461a      	mov	r2, r3
 80002de:	4623      	mov	r3, r4
 80002e0:	80fb      	strh	r3, [r7, #6]
 80002e2:	4603      	mov	r3, r0
 80002e4:	80bb      	strh	r3, [r7, #4]
 80002e6:	460b      	mov	r3, r1
 80002e8:	807b      	strh	r3, [r7, #2]
 80002ea:	4613      	mov	r3, r2
 80002ec:	803b      	strh	r3, [r7, #0]
	uint16_t resultado = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	81fb      	strh	r3, [r7, #14]

	resultado = (x - min_int) * (max_out - min_out + 1) / (max_int - min_int + 1) + min_out;
 80002f2:	88fa      	ldrh	r2, [r7, #6]
 80002f4:	88bb      	ldrh	r3, [r7, #4]
 80002f6:	1ad3      	subs	r3, r2, r3
 80002f8:	8b39      	ldrh	r1, [r7, #24]
 80002fa:	883a      	ldrh	r2, [r7, #0]
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	3201      	adds	r2, #1
 8000300:	fb03 f202 	mul.w	r2, r3, r2
 8000304:	8879      	ldrh	r1, [r7, #2]
 8000306:	88bb      	ldrh	r3, [r7, #4]
 8000308:	1acb      	subs	r3, r1, r3
 800030a:	3301      	adds	r3, #1
 800030c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000310:	b29a      	uxth	r2, r3
 8000312:	883b      	ldrh	r3, [r7, #0]
 8000314:	4413      	add	r3, r2
 8000316:	81fb      	strh	r3, [r7, #14]
	//resultado = (x - min_int) * (max_out - min_out) / (max_int - min_int) + min_out;
    return resultado;
 8000318:	89fb      	ldrh	r3, [r7, #14]
}
 800031a:	4618      	mov	r0, r3
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bc90      	pop	{r4, r7}
 8000322:	4770      	bx	lr

08000324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000328:	f000 fb90 	bl	8000a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800032c:	f000 f826 	bl	800037c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000330:	f7ff ff8e 	bl	8000250 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000334:	f7ff ff0a 	bl	800014c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000338:	f000 fae4 	bl	8000904 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800033c:	f000 f9d8 	bl	80006f0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000340:	480a      	ldr	r0, [pc, #40]	@ (800036c <main+0x48>)
 8000342:	f000 fcbd 	bl	8000cc0 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000346:	2104      	movs	r1, #4
 8000348:	4809      	ldr	r0, [pc, #36]	@ (8000370 <main+0x4c>)
 800034a:	f002 f891 	bl	8002470 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800034e:	2108      	movs	r1, #8
 8000350:	4807      	ldr	r0, [pc, #28]	@ (8000370 <main+0x4c>)
 8000352:	f002 f88d 	bl	8002470 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000356:	210c      	movs	r1, #12
 8000358:	4805      	ldr	r0, [pc, #20]	@ (8000370 <main+0x4c>)
 800035a:	f002 f889 	bl	8002470 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Duty Cycle: %d\n\r", dutycycle);
 800035e:	4b05      	ldr	r3, [pc, #20]	@ (8000374 <main+0x50>)
 8000360:	881b      	ldrh	r3, [r3, #0]
 8000362:	4619      	mov	r1, r3
 8000364:	4804      	ldr	r0, [pc, #16]	@ (8000378 <main+0x54>)
 8000366:	f003 fce7 	bl	8003d38 <iprintf>
 800036a:	e7f8      	b.n	800035e <main+0x3a>
 800036c:	20000084 	.word	0x20000084
 8000370:	200000c0 	.word	0x200000c0
 8000374:	200000b8 	.word	0x200000b8
 8000378:	08004a40 	.word	0x08004a40

0800037c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b094      	sub	sp, #80	@ 0x50
 8000380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000382:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000386:	2228      	movs	r2, #40	@ 0x28
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f003 fd29 	bl	8003de2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000390:	f107 0314 	add.w	r3, r7, #20
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	60da      	str	r2, [r3, #12]
 800039e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ac:	2301      	movs	r3, #1
 80003ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ba:	2301      	movs	r3, #1
 80003bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003be:	2302      	movs	r3, #2
 80003c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003c8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003d2:	4618      	mov	r0, r3
 80003d4:	f001 fade 	bl	8001994 <HAL_RCC_OscConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003de:	f000 f869 	bl	80004b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e2:	230f      	movs	r3, #15
 80003e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e6:	2302      	movs	r3, #2
 80003e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80003f4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80003f8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003fa:	f107 0314 	add.w	r3, r7, #20
 80003fe:	2102      	movs	r1, #2
 8000400:	4618      	mov	r0, r3
 8000402:	f001 fd49 	bl	8001e98 <HAL_RCC_ClockConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800040c:	f000 f852 	bl	80004b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000410:	2302      	movs	r3, #2
 8000412:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000414:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000418:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	4618      	mov	r0, r3
 800041e:	f001 fec9 	bl	80021b4 <HAL_RCCEx_PeriphCLKConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000428:	f000 f844 	bl	80004b4 <Error_Handler>
  }
}
 800042c:	bf00      	nop
 800042e:	3750      	adds	r7, #80	@ 0x50
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af02      	add	r7, sp, #8
 800043a:	6078      	str	r0, [r7, #4]
	adc_value = HAL_ADC_GetValue(hadc1);
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	f000 fcf5 	bl	8000e2c <HAL_ADC_GetValue>
 8000442:	4603      	mov	r3, r0
 8000444:	b29a      	uxth	r2, r3
 8000446:	4b17      	ldr	r3, [pc, #92]	@ (80004a4 <HAL_ADC_ConvCpltCallback+0x70>)
 8000448:	801a      	strh	r2, [r3, #0]
	adc_conversor = map(adc_value, 0, 4095, 0, 1000);
 800044a:	4b16      	ldr	r3, [pc, #88]	@ (80004a4 <HAL_ADC_ConvCpltCallback+0x70>)
 800044c:	8818      	ldrh	r0, [r3, #0]
 800044e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000452:	9300      	str	r3, [sp, #0]
 8000454:	2300      	movs	r3, #0
 8000456:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800045a:	2100      	movs	r1, #0
 800045c:	f7ff ff38 	bl	80002d0 <map>
 8000460:	4603      	mov	r3, r0
 8000462:	461a      	mov	r2, r3
 8000464:	4b10      	ldr	r3, [pc, #64]	@ (80004a8 <HAL_ADC_ConvCpltCallback+0x74>)
 8000466:	801a      	strh	r2, [r3, #0]
	dutycycle = map(adc_value, 0, 1000, 0, 100);
 8000468:	4b0e      	ldr	r3, [pc, #56]	@ (80004a4 <HAL_ADC_ConvCpltCallback+0x70>)
 800046a:	8818      	ldrh	r0, [r3, #0]
 800046c:	2364      	movs	r3, #100	@ 0x64
 800046e:	9300      	str	r3, [sp, #0]
 8000470:	2300      	movs	r3, #0
 8000472:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000476:	2100      	movs	r1, #0
 8000478:	f7ff ff2a 	bl	80002d0 <map>
 800047c:	4603      	mov	r3, r0
 800047e:	461a      	mov	r2, r3
 8000480:	4b0a      	ldr	r3, [pc, #40]	@ (80004ac <HAL_ADC_ConvCpltCallback+0x78>)
 8000482:	801a      	strh	r2, [r3, #0]
	TIM1->CCR2 = adc_conversor;
 8000484:	4b08      	ldr	r3, [pc, #32]	@ (80004a8 <HAL_ADC_ConvCpltCallback+0x74>)
 8000486:	881a      	ldrh	r2, [r3, #0]
 8000488:	4b09      	ldr	r3, [pc, #36]	@ (80004b0 <HAL_ADC_ConvCpltCallback+0x7c>)
 800048a:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM1->CCR3 = adc_conversor;
 800048c:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <HAL_ADC_ConvCpltCallback+0x74>)
 800048e:	881a      	ldrh	r2, [r3, #0]
 8000490:	4b07      	ldr	r3, [pc, #28]	@ (80004b0 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000492:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM1->CCR4 = adc_conversor;
 8000494:	4b04      	ldr	r3, [pc, #16]	@ (80004a8 <HAL_ADC_ConvCpltCallback+0x74>)
 8000496:	881a      	ldrh	r2, [r3, #0]
 8000498:	4b05      	ldr	r3, [pc, #20]	@ (80004b0 <HAL_ADC_ConvCpltCallback+0x7c>)
 800049a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800049c:	bf00      	nop
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	200000b4 	.word	0x200000b4
 80004a8:	200000b6 	.word	0x200000b6
 80004ac:	200000b8 	.word	0x200000b8
 80004b0:	40012c00 	.word	0x40012c00

080004b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b8:	b672      	cpsid	i
}
 80004ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <Error_Handler+0x8>

080004c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004c6:	4b15      	ldr	r3, [pc, #84]	@ (800051c <HAL_MspInit+0x5c>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	4a14      	ldr	r2, [pc, #80]	@ (800051c <HAL_MspInit+0x5c>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6193      	str	r3, [r2, #24]
 80004d2:	4b12      	ldr	r3, [pc, #72]	@ (800051c <HAL_MspInit+0x5c>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004de:	4b0f      	ldr	r3, [pc, #60]	@ (800051c <HAL_MspInit+0x5c>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	4a0e      	ldr	r2, [pc, #56]	@ (800051c <HAL_MspInit+0x5c>)
 80004e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004e8:	61d3      	str	r3, [r2, #28]
 80004ea:	4b0c      	ldr	r3, [pc, #48]	@ (800051c <HAL_MspInit+0x5c>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000520 <HAL_MspInit+0x60>)
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	4a04      	ldr	r2, [pc, #16]	@ (8000520 <HAL_MspInit+0x60>)
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	40021000 	.word	0x40021000
 8000520:	40010000 	.word	0x40010000

08000524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <NMI_Handler+0x4>

0800052c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <HardFault_Handler+0x4>

08000534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <MemManage_Handler+0x4>

0800053c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <BusFault_Handler+0x4>

08000544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <UsageFault_Handler+0x4>

0800054c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr

08000570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000574:	f000 fab0 	bl	8000ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}

0800057c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000580:	4802      	ldr	r0, [pc, #8]	@ (800058c <ADC1_2_IRQHandler+0x10>)
 8000582:	f000 fc5f 	bl	8000e44 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000084 	.word	0x20000084

08000590 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000594:	4802      	ldr	r0, [pc, #8]	@ (80005a0 <USART3_IRQHandler+0x10>)
 8000596:	f002 fdbd 	bl	8003114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000108 	.word	0x20000108

080005a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
 80005b4:	e00a      	b.n	80005cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005b6:	f3af 8000 	nop.w
 80005ba:	4601      	mov	r1, r0
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	1c5a      	adds	r2, r3, #1
 80005c0:	60ba      	str	r2, [r7, #8]
 80005c2:	b2ca      	uxtb	r2, r1
 80005c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	3301      	adds	r3, #1
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	697a      	ldr	r2, [r7, #20]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	dbf0      	blt.n	80005b6 <_read+0x12>
  }

  return len;
 80005d4:	687b      	ldr	r3, [r7, #4]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	b086      	sub	sp, #24
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	60f8      	str	r0, [r7, #12]
 80005e6:	60b9      	str	r1, [r7, #8]
 80005e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	e009      	b.n	8000604 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	60ba      	str	r2, [r7, #8]
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff fe57 	bl	80002ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	3301      	adds	r3, #1
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	429a      	cmp	r2, r3
 800060a:	dbf1      	blt.n	80005f0 <_write+0x12>
  }
  return len;
 800060c:	687b      	ldr	r3, [r7, #4]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <_close>:

int _close(int file)
{
 8000616:	b480      	push	{r7}
 8000618:	b083      	sub	sp, #12
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000622:	4618      	mov	r0, r3
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800063c:	605a      	str	r2, [r3, #4]
  return 0;
 800063e:	2300      	movs	r3, #0
}
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr

0800064a <_isatty>:

int _isatty(int file)
{
 800064a:	b480      	push	{r7}
 800064c:	b083      	sub	sp, #12
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000652:	2301      	movs	r3, #1
}
 8000654:	4618      	mov	r0, r3
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr

0800065e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800065e:	b480      	push	{r7}
 8000660:	b085      	sub	sp, #20
 8000662:	af00      	add	r7, sp, #0
 8000664:	60f8      	str	r0, [r7, #12]
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
	...

08000678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000680:	4a14      	ldr	r2, [pc, #80]	@ (80006d4 <_sbrk+0x5c>)
 8000682:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <_sbrk+0x60>)
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800068c:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <_sbrk+0x64>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d102      	bne.n	800069a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000694:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <_sbrk+0x64>)
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <_sbrk+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800069a:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <_sbrk+0x64>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	693a      	ldr	r2, [r7, #16]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d207      	bcs.n	80006b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006a8:	f003 fbea 	bl	8003e80 <__errno>
 80006ac:	4603      	mov	r3, r0
 80006ae:	220c      	movs	r2, #12
 80006b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	e009      	b.n	80006cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006b8:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <_sbrk+0x64>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006be:	4b07      	ldr	r3, [pc, #28]	@ (80006dc <_sbrk+0x64>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	4a05      	ldr	r2, [pc, #20]	@ (80006dc <_sbrk+0x64>)
 80006c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ca:	68fb      	ldr	r3, [r7, #12]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20005000 	.word	0x20005000
 80006d8:	00000400 	.word	0x00000400
 80006dc:	200000bc 	.word	0x200000bc
 80006e0:	200002a0 	.word	0x200002a0

080006e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b096      	sub	sp, #88	@ 0x58
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000704:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800070e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]
 800071e:	615a      	str	r2, [r3, #20]
 8000720:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2220      	movs	r2, #32
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f003 fb5a 	bl	8003de2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800072e:	4b4a      	ldr	r3, [pc, #296]	@ (8000858 <MX_TIM1_Init+0x168>)
 8000730:	4a4a      	ldr	r2, [pc, #296]	@ (800085c <MX_TIM1_Init+0x16c>)
 8000732:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8000734:	4b48      	ldr	r3, [pc, #288]	@ (8000858 <MX_TIM1_Init+0x168>)
 8000736:	22b3      	movs	r2, #179	@ 0xb3
 8000738:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073a:	4b47      	ldr	r3, [pc, #284]	@ (8000858 <MX_TIM1_Init+0x168>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000740:	4b45      	ldr	r3, [pc, #276]	@ (8000858 <MX_TIM1_Init+0x168>)
 8000742:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000746:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000748:	4b43      	ldr	r3, [pc, #268]	@ (8000858 <MX_TIM1_Init+0x168>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800074e:	4b42      	ldr	r3, [pc, #264]	@ (8000858 <MX_TIM1_Init+0x168>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000754:	4b40      	ldr	r3, [pc, #256]	@ (8000858 <MX_TIM1_Init+0x168>)
 8000756:	2280      	movs	r2, #128	@ 0x80
 8000758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800075a:	483f      	ldr	r0, [pc, #252]	@ (8000858 <MX_TIM1_Init+0x168>)
 800075c:	f001 fde0 	bl	8002320 <HAL_TIM_Base_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000766:	f7ff fea5 	bl	80004b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000770:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000774:	4619      	mov	r1, r3
 8000776:	4838      	ldr	r0, [pc, #224]	@ (8000858 <MX_TIM1_Init+0x168>)
 8000778:	f001 ffde 	bl	8002738 <HAL_TIM_ConfigClockSource>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000782:	f7ff fe97 	bl	80004b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000786:	4834      	ldr	r0, [pc, #208]	@ (8000858 <MX_TIM1_Init+0x168>)
 8000788:	f001 fe19 	bl	80023be <HAL_TIM_PWM_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000792:	f7ff fe8f 	bl	80004b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000796:	2300      	movs	r3, #0
 8000798:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800079e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007a2:	4619      	mov	r1, r3
 80007a4:	482c      	ldr	r0, [pc, #176]	@ (8000858 <MX_TIM1_Init+0x168>)
 80007a6:	f002 fb33 	bl	8002e10 <HAL_TIMEx_MasterConfigSynchronization>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80007b0:	f7ff fe80 	bl	80004b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b4:	2360      	movs	r3, #96	@ 0x60
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007c0:	2300      	movs	r3, #0
 80007c2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007c8:	2300      	movs	r3, #0
 80007ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007cc:	2300      	movs	r3, #0
 80007ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d4:	2204      	movs	r2, #4
 80007d6:	4619      	mov	r1, r3
 80007d8:	481f      	ldr	r0, [pc, #124]	@ (8000858 <MX_TIM1_Init+0x168>)
 80007da:	f001 feeb 	bl	80025b4 <HAL_TIM_PWM_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80007e4:	f7ff fe66 	bl	80004b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ec:	2208      	movs	r2, #8
 80007ee:	4619      	mov	r1, r3
 80007f0:	4819      	ldr	r0, [pc, #100]	@ (8000858 <MX_TIM1_Init+0x168>)
 80007f2:	f001 fedf 	bl	80025b4 <HAL_TIM_PWM_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80007fc:	f7ff fe5a 	bl	80004b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000800:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000804:	220c      	movs	r2, #12
 8000806:	4619      	mov	r1, r3
 8000808:	4813      	ldr	r0, [pc, #76]	@ (8000858 <MX_TIM1_Init+0x168>)
 800080a:	f001 fed3 	bl	80025b4 <HAL_TIM_PWM_ConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000814:	f7ff fe4e 	bl	80004b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800082c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000830:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4619      	mov	r1, r3
 800083a:	4807      	ldr	r0, [pc, #28]	@ (8000858 <MX_TIM1_Init+0x168>)
 800083c:	f002 fb46 	bl	8002ecc <HAL_TIMEx_ConfigBreakDeadTime>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000846:	f7ff fe35 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800084a:	4803      	ldr	r0, [pc, #12]	@ (8000858 <MX_TIM1_Init+0x168>)
 800084c:	f000 f826 	bl	800089c <HAL_TIM_MspPostInit>

}
 8000850:	bf00      	nop
 8000852:	3758      	adds	r7, #88	@ 0x58
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200000c0 	.word	0x200000c0
 800085c:	40012c00 	.word	0x40012c00

08000860 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a09      	ldr	r2, [pc, #36]	@ (8000894 <HAL_TIM_Base_MspInit+0x34>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d10b      	bne.n	800088a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <HAL_TIM_Base_MspInit+0x38>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	4a08      	ldr	r2, [pc, #32]	@ (8000898 <HAL_TIM_Base_MspInit+0x38>)
 8000878:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800087c:	6193      	str	r3, [r2, #24]
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <HAL_TIM_Base_MspInit+0x38>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800088a:	bf00      	nop
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	40012c00 	.word	0x40012c00
 8000898:	40021000 	.word	0x40021000

0800089c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a10      	ldr	r2, [pc, #64]	@ (80008f8 <HAL_TIM_MspPostInit+0x5c>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d118      	bne.n	80008ee <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <HAL_TIM_MspPostInit+0x60>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a0e      	ldr	r2, [pc, #56]	@ (80008fc <HAL_TIM_MspPostInit+0x60>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <HAL_TIM_MspPostInit+0x60>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80008d4:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80008d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2302      	movs	r3, #2
 80008e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 0310 	add.w	r3, r7, #16
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	@ (8000900 <HAL_TIM_MspPostInit+0x64>)
 80008ea:	f000 fecf 	bl	800168c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80008ee:	bf00      	nop
 80008f0:	3720      	adds	r7, #32
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40012c00 	.word	0x40012c00
 80008fc:	40021000 	.word	0x40021000
 8000900:	40010800 	.word	0x40010800

08000904 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000908:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_USART3_UART_Init+0x4c>)
 800090a:	4a12      	ldr	r2, [pc, #72]	@ (8000954 <MX_USART3_UART_Init+0x50>)
 800090c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800090e:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <MX_USART3_UART_Init+0x4c>)
 8000910:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000914:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_USART3_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_USART3_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_USART3_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_USART3_UART_Init+0x4c>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <MX_USART3_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <MX_USART3_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_USART3_UART_Init+0x4c>)
 800093c:	f002 fb17 	bl	8002f6e <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000946:	f7ff fdb5 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000108 	.word	0x20000108
 8000954:	40004800 	.word	0x40004800

08000958 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a20      	ldr	r2, [pc, #128]	@ (80009f4 <HAL_UART_MspInit+0x9c>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d139      	bne.n	80009ec <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000978:	4b1f      	ldr	r3, [pc, #124]	@ (80009f8 <HAL_UART_MspInit+0xa0>)
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	4a1e      	ldr	r2, [pc, #120]	@ (80009f8 <HAL_UART_MspInit+0xa0>)
 800097e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000982:	61d3      	str	r3, [r2, #28]
 8000984:	4b1c      	ldr	r3, [pc, #112]	@ (80009f8 <HAL_UART_MspInit+0xa0>)
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000990:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <HAL_UART_MspInit+0xa0>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a18      	ldr	r2, [pc, #96]	@ (80009f8 <HAL_UART_MspInit+0xa0>)
 8000996:	f043 0308 	orr.w	r3, r3, #8
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b16      	ldr	r3, [pc, #88]	@ (80009f8 <HAL_UART_MspInit+0xa0>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0308 	and.w	r3, r3, #8
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b6:	f107 0310 	add.w	r3, r7, #16
 80009ba:	4619      	mov	r1, r3
 80009bc:	480f      	ldr	r0, [pc, #60]	@ (80009fc <HAL_UART_MspInit+0xa4>)
 80009be:	f000 fe65 	bl	800168c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4619      	mov	r1, r3
 80009d6:	4809      	ldr	r0, [pc, #36]	@ (80009fc <HAL_UART_MspInit+0xa4>)
 80009d8:	f000 fe58 	bl	800168c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2100      	movs	r1, #0
 80009e0:	2027      	movs	r0, #39	@ 0x27
 80009e2:	f000 fd6a 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80009e6:	2027      	movs	r0, #39	@ 0x27
 80009e8:	f000 fd83 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80009ec:	bf00      	nop
 80009ee:	3720      	adds	r7, #32
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40004800 	.word	0x40004800
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40010c00 	.word	0x40010c00

08000a00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a00:	f7ff fe70 	bl	80006e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a04:	480b      	ldr	r0, [pc, #44]	@ (8000a34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a06:	490c      	ldr	r1, [pc, #48]	@ (8000a38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a08:	4a0c      	ldr	r2, [pc, #48]	@ (8000a3c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a09      	ldr	r2, [pc, #36]	@ (8000a40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a1c:	4c09      	ldr	r4, [pc, #36]	@ (8000a44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f003 fa2f 	bl	8003e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a2e:	f7ff fc79 	bl	8000324 <main>
  bx lr
 8000a32:	4770      	bx	lr
  ldr r0, =_sdata
 8000a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a38:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a3c:	08004abc 	.word	0x08004abc
  ldr r2, =_sbss
 8000a40:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a44:	200002a0 	.word	0x200002a0

08000a48 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <CAN1_RX1_IRQHandler>
	...

08000a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <HAL_Init+0x28>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a07      	ldr	r2, [pc, #28]	@ (8000a74 <HAL_Init+0x28>)
 8000a56:	f043 0310 	orr.w	r3, r3, #16
 8000a5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 fd21 	bl	80014a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a62:	200f      	movs	r0, #15
 8000a64:	f000 f808 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a68:	f7ff fd2a 	bl	80004c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40022000 	.word	0x40022000

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <HAL_InitTick+0x54>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <HAL_InitTick+0x58>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fd39 	bl	800150e <HAL_SYSTICK_Config>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00e      	b.n	8000ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d80a      	bhi.n	8000ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f000 fd01 	bl	80014ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab8:	4a06      	ldr	r2, [pc, #24]	@ (8000ad4 <HAL_InitTick+0x5c>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e000      	b.n	8000ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000004 	.word	0x20000004

08000ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <HAL_IncTick+0x1c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b05      	ldr	r3, [pc, #20]	@ (8000af8 <HAL_IncTick+0x20>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a03      	ldr	r2, [pc, #12]	@ (8000af8 <HAL_IncTick+0x20>)
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000150 	.word	0x20000150

08000afc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b02      	ldr	r3, [pc, #8]	@ (8000b0c <HAL_GetTick+0x10>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	20000150 	.word	0x20000150

08000b10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d101      	bne.n	8000b32 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e0be      	b.n	8000cb0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d109      	bne.n	8000b54 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff fb3a 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f000 fb8f 	bl	8001278 <ADC_ConversionStop_Disable>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b62:	f003 0310 	and.w	r3, r3, #16
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8099 	bne.w	8000c9e <HAL_ADC_Init+0x18e>
 8000b6c:	7dfb      	ldrb	r3, [r7, #23]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f040 8095 	bne.w	8000c9e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b78:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000b7c:	f023 0302 	bic.w	r3, r3, #2
 8000b80:	f043 0202 	orr.w	r2, r3, #2
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b90:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	7b1b      	ldrb	r3, [r3, #12]
 8000b96:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b98:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ba8:	d003      	beq.n	8000bb2 <HAL_ADC_Init+0xa2>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d102      	bne.n	8000bb8 <HAL_ADC_Init+0xa8>
 8000bb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bb6:	e000      	b.n	8000bba <HAL_ADC_Init+0xaa>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	7d1b      	ldrb	r3, [r3, #20]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d119      	bne.n	8000bfc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	7b1b      	ldrb	r3, [r3, #12]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d109      	bne.n	8000be4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	035a      	lsls	r2, r3, #13
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	e00b      	b.n	8000bfc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000be8:	f043 0220 	orr.w	r2, r3, #32
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bf4:	f043 0201 	orr.w	r2, r3, #1
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	4b28      	ldr	r3, [pc, #160]	@ (8000cb8 <HAL_ADC_Init+0x1a8>)
 8000c18:	4013      	ands	r3, r2
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	6812      	ldr	r2, [r2, #0]
 8000c1e:	68b9      	ldr	r1, [r7, #8]
 8000c20:	430b      	orrs	r3, r1
 8000c22:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c2c:	d003      	beq.n	8000c36 <HAL_ADC_Init+0x126>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d104      	bne.n	8000c40 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	691b      	ldr	r3, [r3, #16]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	051b      	lsls	r3, r3, #20
 8000c3e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c46:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	430a      	orrs	r2, r1
 8000c52:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	689a      	ldr	r2, [r3, #8]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <HAL_ADC_Init+0x1ac>)
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d10b      	bne.n	8000c7c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c6e:	f023 0303 	bic.w	r3, r3, #3
 8000c72:	f043 0201 	orr.w	r2, r3, #1
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c7a:	e018      	b.n	8000cae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c80:	f023 0312 	bic.w	r3, r3, #18
 8000c84:	f043 0210 	orr.w	r2, r3, #16
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c90:	f043 0201 	orr.w	r2, r3, #1
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c9c:	e007      	b.n	8000cae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca2:	f043 0210 	orr.w	r2, r3, #16
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	ffe1f7fd 	.word	0xffe1f7fd
 8000cbc:	ff1f0efe 	.word	0xff1f0efe

08000cc0 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d101      	bne.n	8000cda <HAL_ADC_Start_IT+0x1a>
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	e0a0      	b.n	8000e1c <HAL_ADC_Start_IT+0x15c>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f000 fa6e 	bl	80011c4 <ADC_Enable>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f040 808f 	bne.w	8000e12 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cf8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000cfc:	f023 0301 	bic.w	r3, r3, #1
 8000d00:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a45      	ldr	r2, [pc, #276]	@ (8000e24 <HAL_ADC_Start_IT+0x164>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d105      	bne.n	8000d1e <HAL_ADC_Start_IT+0x5e>
 8000d12:	4b45      	ldr	r3, [pc, #276]	@ (8000e28 <HAL_ADC_Start_IT+0x168>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d115      	bne.n	8000d4a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d22:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d026      	beq.n	8000d86 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d3c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000d40:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d48:	e01d      	b.n	8000d86 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d4e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a33      	ldr	r2, [pc, #204]	@ (8000e28 <HAL_ADC_Start_IT+0x168>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d004      	beq.n	8000d6a <HAL_ADC_Start_IT+0xaa>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a2f      	ldr	r2, [pc, #188]	@ (8000e24 <HAL_ADC_Start_IT+0x164>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d10d      	bne.n	8000d86 <HAL_ADC_Start_IT+0xc6>
 8000d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e28 <HAL_ADC_Start_IT+0x168>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d007      	beq.n	8000d86 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d7a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000d7e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d006      	beq.n	8000da0 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d96:	f023 0206 	bic.w	r2, r3, #6
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d9e:	e002      	b.n	8000da6 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f06f 0202 	mvn.w	r2, #2
 8000db6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f042 0220 	orr.w	r2, r2, #32
 8000dc6:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000dd2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000dd6:	d113      	bne.n	8000e00 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ddc:	4a11      	ldr	r2, [pc, #68]	@ (8000e24 <HAL_ADC_Start_IT+0x164>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d105      	bne.n	8000dee <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000de2:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <HAL_ADC_Start_IT+0x168>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d108      	bne.n	8000e00 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	e00c      	b.n	8000e1a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	e003      	b.n	8000e1a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40012800 	.word	0x40012800
 8000e28:	40012400 	.word	0x40012400

08000e2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	f003 0320 	and.w	r3, r3, #32
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d03e      	beq.n	8000ee4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d039      	beq.n	8000ee4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e74:	f003 0310 	and.w	r3, r3, #16
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d105      	bne.n	8000e88 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e80:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000e92:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000e96:	d11d      	bne.n	8000ed4 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d119      	bne.n	8000ed4 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 0220 	bic.w	r2, r2, #32
 8000eae:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d105      	bne.n	8000ed4 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ecc:	f043 0201 	orr.w	r2, r3, #1
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff faad 	bl	8000434 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f06f 0212 	mvn.w	r2, #18
 8000ee2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d04d      	beq.n	8000f8a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d048      	beq.n	8000f8a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000efc:	f003 0310 	and.w	r3, r3, #16
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d105      	bne.n	8000f10 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f08:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8000f1a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000f1e:	d012      	beq.n	8000f46 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d125      	bne.n	8000f7a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000f38:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000f3c:	d11d      	bne.n	8000f7a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d119      	bne.n	8000f7a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f54:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d105      	bne.n	8000f7a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f72:	f043 0201 	orr.w	r2, r3, #1
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f9bd 	bl	80012fa <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f06f 020c 	mvn.w	r2, #12
 8000f88:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d012      	beq.n	8000fba <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d00d      	beq.n	8000fba <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fa2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f809 	bl	8000fc2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f06f 0201 	mvn.w	r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d101      	bne.n	8000ff4 <HAL_ADC_ConfigChannel+0x20>
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	e0dc      	b.n	80011ae <HAL_ADC_ConfigChannel+0x1da>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b06      	cmp	r3, #6
 8001002:	d81c      	bhi.n	800103e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	4613      	mov	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	3b05      	subs	r3, #5
 8001016:	221f      	movs	r2, #31
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	4019      	ands	r1, r3
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	3b05      	subs	r3, #5
 8001030:	fa00 f203 	lsl.w	r2, r0, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	430a      	orrs	r2, r1
 800103a:	635a      	str	r2, [r3, #52]	@ 0x34
 800103c:	e03c      	b.n	80010b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b0c      	cmp	r3, #12
 8001044:	d81c      	bhi.n	8001080 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	3b23      	subs	r3, #35	@ 0x23
 8001058:	221f      	movs	r2, #31
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	4019      	ands	r1, r3
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	6818      	ldr	r0, [r3, #0]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	3b23      	subs	r3, #35	@ 0x23
 8001072:	fa00 f203 	lsl.w	r2, r0, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	430a      	orrs	r2, r1
 800107c:	631a      	str	r2, [r3, #48]	@ 0x30
 800107e:	e01b      	b.n	80010b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	3b41      	subs	r3, #65	@ 0x41
 8001092:	221f      	movs	r2, #31
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	4019      	ands	r1, r3
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	3b41      	subs	r3, #65	@ 0x41
 80010ac:	fa00 f203 	lsl.w	r2, r0, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b09      	cmp	r3, #9
 80010be:	d91c      	bls.n	80010fa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68d9      	ldr	r1, [r3, #12]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4613      	mov	r3, r2
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	4413      	add	r3, r2
 80010d0:	3b1e      	subs	r3, #30
 80010d2:	2207      	movs	r2, #7
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	4019      	ands	r1, r3
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	6898      	ldr	r0, [r3, #8]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	3b1e      	subs	r3, #30
 80010ec:	fa00 f203 	lsl.w	r2, r0, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	e019      	b.n	800112e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6919      	ldr	r1, [r3, #16]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4613      	mov	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4413      	add	r3, r2
 800110a:	2207      	movs	r2, #7
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	4019      	ands	r1, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	6898      	ldr	r0, [r3, #8]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4613      	mov	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	4413      	add	r3, r2
 8001122:	fa00 f203 	lsl.w	r2, r0, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	430a      	orrs	r2, r1
 800112c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b10      	cmp	r3, #16
 8001134:	d003      	beq.n	800113e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800113a:	2b11      	cmp	r3, #17
 800113c:	d132      	bne.n	80011a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a1d      	ldr	r2, [pc, #116]	@ (80011b8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d125      	bne.n	8001194 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d126      	bne.n	80011a4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001164:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b10      	cmp	r3, #16
 800116c:	d11a      	bne.n	80011a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800116e:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <HAL_ADC_ConfigChannel+0x1e8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a13      	ldr	r2, [pc, #76]	@ (80011c0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001174:	fba2 2303 	umull	r2, r3, r2, r3
 8001178:	0c9a      	lsrs	r2, r3, #18
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001184:	e002      	b.n	800118c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	3b01      	subs	r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f9      	bne.n	8001186 <HAL_ADC_ConfigChannel+0x1b2>
 8001192:	e007      	b.n	80011a4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001198:	f043 0220 	orr.w	r2, r3, #32
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	40012400 	.word	0x40012400
 80011bc:	20000000 	.word	0x20000000
 80011c0:	431bde83 	.word	0x431bde83

080011c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d040      	beq.n	8001264 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f042 0201 	orr.w	r2, r2, #1
 80011f0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <ADC_Enable+0xac>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001274 <ADC_Enable+0xb0>)
 80011f8:	fba2 2303 	umull	r2, r3, r2, r3
 80011fc:	0c9b      	lsrs	r3, r3, #18
 80011fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001200:	e002      	b.n	8001208 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	3b01      	subs	r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f9      	bne.n	8001202 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800120e:	f7ff fc75 	bl	8000afc <HAL_GetTick>
 8001212:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001214:	e01f      	b.n	8001256 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001216:	f7ff fc71 	bl	8000afc <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d918      	bls.n	8001256 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b01      	cmp	r3, #1
 8001230:	d011      	beq.n	8001256 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001236:	f043 0210 	orr.w	r2, r3, #16
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001242:	f043 0201 	orr.w	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e007      	b.n	8001266 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b01      	cmp	r3, #1
 8001262:	d1d8      	bne.n	8001216 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000000 	.word	0x20000000
 8001274:	431bde83 	.word	0x431bde83

08001278 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b01      	cmp	r3, #1
 8001290:	d12e      	bne.n	80012f0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0201 	bic.w	r2, r2, #1
 80012a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012a2:	f7ff fc2b 	bl	8000afc <HAL_GetTick>
 80012a6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012a8:	e01b      	b.n	80012e2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012aa:	f7ff fc27 	bl	8000afc <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d914      	bls.n	80012e2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d10d      	bne.n	80012e2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ca:	f043 0210 	orr.w	r2, r3, #16
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d6:	f043 0201 	orr.w	r2, r3, #1
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e007      	b.n	80012f2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d0dc      	beq.n	80012aa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	@ (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	@ (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db0b      	blt.n	800139a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	4906      	ldr	r1, [pc, #24]	@ (80013a4 <__NVIC_EnableIRQ+0x34>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	@ (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	@ (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	@ 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
         );
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	@ 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001470:	d301      	bcc.n	8001476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001472:	2301      	movs	r3, #1
 8001474:	e00f      	b.n	8001496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001476:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <SysTick_Config+0x40>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147e:	210f      	movs	r1, #15
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f7ff ff90 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001488:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <SysTick_Config+0x40>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	4b04      	ldr	r3, [pc, #16]	@ (80014a0 <SysTick_Config+0x40>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff2d 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014cc:	f7ff ff42 	bl	8001354 <__NVIC_GetPriorityGrouping>
 80014d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	6978      	ldr	r0, [r7, #20]
 80014d8:	f7ff ff90 	bl	80013fc <NVIC_EncodePriority>
 80014dc:	4602      	mov	r2, r0
 80014de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff5f 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff35 	bl	8001370 <__NVIC_EnableIRQ>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ffa2 	bl	8001460 <SysTick_Config>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001526:	b480      	push	{r7}
 8001528:	b085      	sub	sp, #20
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d008      	beq.n	8001550 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2204      	movs	r2, #4
 8001542:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e020      	b.n	8001592 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 020e 	bic.w	r2, r2, #14
 800155e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0201 	bic.w	r2, r2, #1
 800156e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001578:	2101      	movs	r1, #1
 800157a:	fa01 f202 	lsl.w	r2, r1, r2
 800157e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001590:	7bfb      	ldrb	r3, [r7, #15]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015a4:	2300      	movs	r3, #0
 80015a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d005      	beq.n	80015c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2204      	movs	r2, #4
 80015b8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
 80015be:	e051      	b.n	8001664 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 020e 	bic.w	r2, r2, #14
 80015ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0201 	bic.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a22      	ldr	r2, [pc, #136]	@ (8001670 <HAL_DMA_Abort_IT+0xd4>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d029      	beq.n	800163e <HAL_DMA_Abort_IT+0xa2>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a21      	ldr	r2, [pc, #132]	@ (8001674 <HAL_DMA_Abort_IT+0xd8>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d022      	beq.n	800163a <HAL_DMA_Abort_IT+0x9e>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001678 <HAL_DMA_Abort_IT+0xdc>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d01a      	beq.n	8001634 <HAL_DMA_Abort_IT+0x98>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a1e      	ldr	r2, [pc, #120]	@ (800167c <HAL_DMA_Abort_IT+0xe0>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d012      	beq.n	800162e <HAL_DMA_Abort_IT+0x92>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a1c      	ldr	r2, [pc, #112]	@ (8001680 <HAL_DMA_Abort_IT+0xe4>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d00a      	beq.n	8001628 <HAL_DMA_Abort_IT+0x8c>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a1b      	ldr	r2, [pc, #108]	@ (8001684 <HAL_DMA_Abort_IT+0xe8>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d102      	bne.n	8001622 <HAL_DMA_Abort_IT+0x86>
 800161c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001620:	e00e      	b.n	8001640 <HAL_DMA_Abort_IT+0xa4>
 8001622:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001626:	e00b      	b.n	8001640 <HAL_DMA_Abort_IT+0xa4>
 8001628:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800162c:	e008      	b.n	8001640 <HAL_DMA_Abort_IT+0xa4>
 800162e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001632:	e005      	b.n	8001640 <HAL_DMA_Abort_IT+0xa4>
 8001634:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001638:	e002      	b.n	8001640 <HAL_DMA_Abort_IT+0xa4>
 800163a:	2310      	movs	r3, #16
 800163c:	e000      	b.n	8001640 <HAL_DMA_Abort_IT+0xa4>
 800163e:	2301      	movs	r3, #1
 8001640:	4a11      	ldr	r2, [pc, #68]	@ (8001688 <HAL_DMA_Abort_IT+0xec>)
 8001642:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	4798      	blx	r3
    } 
  }
  return status;
 8001664:	7bfb      	ldrb	r3, [r7, #15]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40020008 	.word	0x40020008
 8001674:	4002001c 	.word	0x4002001c
 8001678:	40020030 	.word	0x40020030
 800167c:	40020044 	.word	0x40020044
 8001680:	40020058 	.word	0x40020058
 8001684:	4002006c 	.word	0x4002006c
 8001688:	40020000 	.word	0x40020000

0800168c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800168c:	b480      	push	{r7}
 800168e:	b08b      	sub	sp, #44	@ 0x2c
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800169a:	2300      	movs	r3, #0
 800169c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169e:	e169      	b.n	8001974 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016a0:	2201      	movs	r2, #1
 80016a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	f040 8158 	bne.w	800196e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	4a9a      	ldr	r2, [pc, #616]	@ (800192c <HAL_GPIO_Init+0x2a0>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d05e      	beq.n	8001786 <HAL_GPIO_Init+0xfa>
 80016c8:	4a98      	ldr	r2, [pc, #608]	@ (800192c <HAL_GPIO_Init+0x2a0>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d875      	bhi.n	80017ba <HAL_GPIO_Init+0x12e>
 80016ce:	4a98      	ldr	r2, [pc, #608]	@ (8001930 <HAL_GPIO_Init+0x2a4>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d058      	beq.n	8001786 <HAL_GPIO_Init+0xfa>
 80016d4:	4a96      	ldr	r2, [pc, #600]	@ (8001930 <HAL_GPIO_Init+0x2a4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d86f      	bhi.n	80017ba <HAL_GPIO_Init+0x12e>
 80016da:	4a96      	ldr	r2, [pc, #600]	@ (8001934 <HAL_GPIO_Init+0x2a8>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d052      	beq.n	8001786 <HAL_GPIO_Init+0xfa>
 80016e0:	4a94      	ldr	r2, [pc, #592]	@ (8001934 <HAL_GPIO_Init+0x2a8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d869      	bhi.n	80017ba <HAL_GPIO_Init+0x12e>
 80016e6:	4a94      	ldr	r2, [pc, #592]	@ (8001938 <HAL_GPIO_Init+0x2ac>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d04c      	beq.n	8001786 <HAL_GPIO_Init+0xfa>
 80016ec:	4a92      	ldr	r2, [pc, #584]	@ (8001938 <HAL_GPIO_Init+0x2ac>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d863      	bhi.n	80017ba <HAL_GPIO_Init+0x12e>
 80016f2:	4a92      	ldr	r2, [pc, #584]	@ (800193c <HAL_GPIO_Init+0x2b0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d046      	beq.n	8001786 <HAL_GPIO_Init+0xfa>
 80016f8:	4a90      	ldr	r2, [pc, #576]	@ (800193c <HAL_GPIO_Init+0x2b0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d85d      	bhi.n	80017ba <HAL_GPIO_Init+0x12e>
 80016fe:	2b12      	cmp	r3, #18
 8001700:	d82a      	bhi.n	8001758 <HAL_GPIO_Init+0xcc>
 8001702:	2b12      	cmp	r3, #18
 8001704:	d859      	bhi.n	80017ba <HAL_GPIO_Init+0x12e>
 8001706:	a201      	add	r2, pc, #4	@ (adr r2, 800170c <HAL_GPIO_Init+0x80>)
 8001708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170c:	08001787 	.word	0x08001787
 8001710:	08001761 	.word	0x08001761
 8001714:	08001773 	.word	0x08001773
 8001718:	080017b5 	.word	0x080017b5
 800171c:	080017bb 	.word	0x080017bb
 8001720:	080017bb 	.word	0x080017bb
 8001724:	080017bb 	.word	0x080017bb
 8001728:	080017bb 	.word	0x080017bb
 800172c:	080017bb 	.word	0x080017bb
 8001730:	080017bb 	.word	0x080017bb
 8001734:	080017bb 	.word	0x080017bb
 8001738:	080017bb 	.word	0x080017bb
 800173c:	080017bb 	.word	0x080017bb
 8001740:	080017bb 	.word	0x080017bb
 8001744:	080017bb 	.word	0x080017bb
 8001748:	080017bb 	.word	0x080017bb
 800174c:	080017bb 	.word	0x080017bb
 8001750:	08001769 	.word	0x08001769
 8001754:	0800177d 	.word	0x0800177d
 8001758:	4a79      	ldr	r2, [pc, #484]	@ (8001940 <HAL_GPIO_Init+0x2b4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d013      	beq.n	8001786 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800175e:	e02c      	b.n	80017ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	623b      	str	r3, [r7, #32]
          break;
 8001766:	e029      	b.n	80017bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	3304      	adds	r3, #4
 800176e:	623b      	str	r3, [r7, #32]
          break;
 8001770:	e024      	b.n	80017bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	3308      	adds	r3, #8
 8001778:	623b      	str	r3, [r7, #32]
          break;
 800177a:	e01f      	b.n	80017bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	330c      	adds	r3, #12
 8001782:	623b      	str	r3, [r7, #32]
          break;
 8001784:	e01a      	b.n	80017bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d102      	bne.n	8001794 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800178e:	2304      	movs	r3, #4
 8001790:	623b      	str	r3, [r7, #32]
          break;
 8001792:	e013      	b.n	80017bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d105      	bne.n	80017a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800179c:	2308      	movs	r3, #8
 800179e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	611a      	str	r2, [r3, #16]
          break;
 80017a6:	e009      	b.n	80017bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017a8:	2308      	movs	r3, #8
 80017aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	615a      	str	r2, [r3, #20]
          break;
 80017b2:	e003      	b.n	80017bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017b4:	2300      	movs	r3, #0
 80017b6:	623b      	str	r3, [r7, #32]
          break;
 80017b8:	e000      	b.n	80017bc <HAL_GPIO_Init+0x130>
          break;
 80017ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	2bff      	cmp	r3, #255	@ 0xff
 80017c0:	d801      	bhi.n	80017c6 <HAL_GPIO_Init+0x13a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	e001      	b.n	80017ca <HAL_GPIO_Init+0x13e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3304      	adds	r3, #4
 80017ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	2bff      	cmp	r3, #255	@ 0xff
 80017d0:	d802      	bhi.n	80017d8 <HAL_GPIO_Init+0x14c>
 80017d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	e002      	b.n	80017de <HAL_GPIO_Init+0x152>
 80017d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017da:	3b08      	subs	r3, #8
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	210f      	movs	r1, #15
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	401a      	ands	r2, r3
 80017f0:	6a39      	ldr	r1, [r7, #32]
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	fa01 f303 	lsl.w	r3, r1, r3
 80017f8:	431a      	orrs	r2, r3
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 80b1 	beq.w	800196e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800180c:	4b4d      	ldr	r3, [pc, #308]	@ (8001944 <HAL_GPIO_Init+0x2b8>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	4a4c      	ldr	r2, [pc, #304]	@ (8001944 <HAL_GPIO_Init+0x2b8>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6193      	str	r3, [r2, #24]
 8001818:	4b4a      	ldr	r3, [pc, #296]	@ (8001944 <HAL_GPIO_Init+0x2b8>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001824:	4a48      	ldr	r2, [pc, #288]	@ (8001948 <HAL_GPIO_Init+0x2bc>)
 8001826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001828:	089b      	lsrs	r3, r3, #2
 800182a:	3302      	adds	r3, #2
 800182c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001830:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	220f      	movs	r2, #15
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	4013      	ands	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a40      	ldr	r2, [pc, #256]	@ (800194c <HAL_GPIO_Init+0x2c0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d013      	beq.n	8001878 <HAL_GPIO_Init+0x1ec>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a3f      	ldr	r2, [pc, #252]	@ (8001950 <HAL_GPIO_Init+0x2c4>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d00d      	beq.n	8001874 <HAL_GPIO_Init+0x1e8>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a3e      	ldr	r2, [pc, #248]	@ (8001954 <HAL_GPIO_Init+0x2c8>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d007      	beq.n	8001870 <HAL_GPIO_Init+0x1e4>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a3d      	ldr	r2, [pc, #244]	@ (8001958 <HAL_GPIO_Init+0x2cc>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d101      	bne.n	800186c <HAL_GPIO_Init+0x1e0>
 8001868:	2303      	movs	r3, #3
 800186a:	e006      	b.n	800187a <HAL_GPIO_Init+0x1ee>
 800186c:	2304      	movs	r3, #4
 800186e:	e004      	b.n	800187a <HAL_GPIO_Init+0x1ee>
 8001870:	2302      	movs	r3, #2
 8001872:	e002      	b.n	800187a <HAL_GPIO_Init+0x1ee>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <HAL_GPIO_Init+0x1ee>
 8001878:	2300      	movs	r3, #0
 800187a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800187c:	f002 0203 	and.w	r2, r2, #3
 8001880:	0092      	lsls	r2, r2, #2
 8001882:	4093      	lsls	r3, r2
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	4313      	orrs	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800188a:	492f      	ldr	r1, [pc, #188]	@ (8001948 <HAL_GPIO_Init+0x2bc>)
 800188c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188e:	089b      	lsrs	r3, r3, #2
 8001890:	3302      	adds	r3, #2
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018a4:	4b2d      	ldr	r3, [pc, #180]	@ (800195c <HAL_GPIO_Init+0x2d0>)
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	492c      	ldr	r1, [pc, #176]	@ (800195c <HAL_GPIO_Init+0x2d0>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	608b      	str	r3, [r1, #8]
 80018b0:	e006      	b.n	80018c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018b2:	4b2a      	ldr	r3, [pc, #168]	@ (800195c <HAL_GPIO_Init+0x2d0>)
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	4928      	ldr	r1, [pc, #160]	@ (800195c <HAL_GPIO_Init+0x2d0>)
 80018bc:	4013      	ands	r3, r2
 80018be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d006      	beq.n	80018da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018cc:	4b23      	ldr	r3, [pc, #140]	@ (800195c <HAL_GPIO_Init+0x2d0>)
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	4922      	ldr	r1, [pc, #136]	@ (800195c <HAL_GPIO_Init+0x2d0>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	60cb      	str	r3, [r1, #12]
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018da:	4b20      	ldr	r3, [pc, #128]	@ (800195c <HAL_GPIO_Init+0x2d0>)
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	491e      	ldr	r1, [pc, #120]	@ (800195c <HAL_GPIO_Init+0x2d0>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d006      	beq.n	8001902 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018f4:	4b19      	ldr	r3, [pc, #100]	@ (800195c <HAL_GPIO_Init+0x2d0>)
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	4918      	ldr	r1, [pc, #96]	@ (800195c <HAL_GPIO_Init+0x2d0>)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
 8001900:	e006      	b.n	8001910 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001902:	4b16      	ldr	r3, [pc, #88]	@ (800195c <HAL_GPIO_Init+0x2d0>)
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	43db      	mvns	r3, r3
 800190a:	4914      	ldr	r1, [pc, #80]	@ (800195c <HAL_GPIO_Init+0x2d0>)
 800190c:	4013      	ands	r3, r2
 800190e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d021      	beq.n	8001960 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800191c:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <HAL_GPIO_Init+0x2d0>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	490e      	ldr	r1, [pc, #56]	@ (800195c <HAL_GPIO_Init+0x2d0>)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	600b      	str	r3, [r1, #0]
 8001928:	e021      	b.n	800196e <HAL_GPIO_Init+0x2e2>
 800192a:	bf00      	nop
 800192c:	10320000 	.word	0x10320000
 8001930:	10310000 	.word	0x10310000
 8001934:	10220000 	.word	0x10220000
 8001938:	10210000 	.word	0x10210000
 800193c:	10120000 	.word	0x10120000
 8001940:	10110000 	.word	0x10110000
 8001944:	40021000 	.word	0x40021000
 8001948:	40010000 	.word	0x40010000
 800194c:	40010800 	.word	0x40010800
 8001950:	40010c00 	.word	0x40010c00
 8001954:	40011000 	.word	0x40011000
 8001958:	40011400 	.word	0x40011400
 800195c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001960:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <HAL_GPIO_Init+0x304>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	43db      	mvns	r3, r3
 8001968:	4909      	ldr	r1, [pc, #36]	@ (8001990 <HAL_GPIO_Init+0x304>)
 800196a:	4013      	ands	r3, r2
 800196c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	3301      	adds	r3, #1
 8001972:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197a:	fa22 f303 	lsr.w	r3, r2, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	f47f ae8e 	bne.w	80016a0 <HAL_GPIO_Init+0x14>
  }
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	372c      	adds	r7, #44	@ 0x2c
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	40010400 	.word	0x40010400

08001994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e272      	b.n	8001e8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 8087 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019b4:	4b92      	ldr	r3, [pc, #584]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d00c      	beq.n	80019da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019c0:	4b8f      	ldr	r3, [pc, #572]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 030c 	and.w	r3, r3, #12
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d112      	bne.n	80019f2 <HAL_RCC_OscConfig+0x5e>
 80019cc:	4b8c      	ldr	r3, [pc, #560]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019d8:	d10b      	bne.n	80019f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019da:	4b89      	ldr	r3, [pc, #548]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d06c      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x12c>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d168      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e24c      	b.n	8001e8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x76>
 80019fc:	4b80      	ldr	r3, [pc, #512]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a7f      	ldr	r2, [pc, #508]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	e02e      	b.n	8001a68 <HAL_RCC_OscConfig+0xd4>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x98>
 8001a12:	4b7b      	ldr	r3, [pc, #492]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a7a      	ldr	r2, [pc, #488]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b78      	ldr	r3, [pc, #480]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a77      	ldr	r2, [pc, #476]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e01d      	b.n	8001a68 <HAL_RCC_OscConfig+0xd4>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a34:	d10c      	bne.n	8001a50 <HAL_RCC_OscConfig+0xbc>
 8001a36:	4b72      	ldr	r3, [pc, #456]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a71      	ldr	r2, [pc, #452]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	4b6f      	ldr	r3, [pc, #444]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a6e      	ldr	r2, [pc, #440]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	e00b      	b.n	8001a68 <HAL_RCC_OscConfig+0xd4>
 8001a50:	4b6b      	ldr	r3, [pc, #428]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a6a      	ldr	r2, [pc, #424]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	4b68      	ldr	r3, [pc, #416]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a67      	ldr	r2, [pc, #412]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d013      	beq.n	8001a98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7ff f844 	bl	8000afc <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a78:	f7ff f840 	bl	8000afc <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b64      	cmp	r3, #100	@ 0x64
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e200      	b.n	8001e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8a:	4b5d      	ldr	r3, [pc, #372]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0xe4>
 8001a96:	e014      	b.n	8001ac2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7ff f830 	bl	8000afc <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa0:	f7ff f82c 	bl	8000afc <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b64      	cmp	r3, #100	@ 0x64
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e1ec      	b.n	8001e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab2:	4b53      	ldr	r3, [pc, #332]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x10c>
 8001abe:	e000      	b.n	8001ac2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d063      	beq.n	8001b96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ace:	4b4c      	ldr	r3, [pc, #304]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00b      	beq.n	8001af2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ada:	4b49      	ldr	r3, [pc, #292]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d11c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x18c>
 8001ae6:	4b46      	ldr	r3, [pc, #280]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d116      	bne.n	8001b20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af2:	4b43      	ldr	r3, [pc, #268]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <HAL_RCC_OscConfig+0x176>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d001      	beq.n	8001b0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e1c0      	b.n	8001e8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4939      	ldr	r1, [pc, #228]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1e:	e03a      	b.n	8001b96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d020      	beq.n	8001b6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b28:	4b36      	ldr	r3, [pc, #216]	@ (8001c04 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2e:	f7fe ffe5 	bl	8000afc <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b36:	f7fe ffe1 	bl	8000afc <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e1a1      	b.n	8001e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b48:	4b2d      	ldr	r3, [pc, #180]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b54:	4b2a      	ldr	r3, [pc, #168]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4927      	ldr	r1, [pc, #156]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	600b      	str	r3, [r1, #0]
 8001b68:	e015      	b.n	8001b96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b6a:	4b26      	ldr	r3, [pc, #152]	@ (8001c04 <HAL_RCC_OscConfig+0x270>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7fe ffc4 	bl	8000afc <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b78:	f7fe ffc0 	bl	8000afc <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e180      	b.n	8001e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d03a      	beq.n	8001c18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d019      	beq.n	8001bde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001baa:	4b17      	ldr	r3, [pc, #92]	@ (8001c08 <HAL_RCC_OscConfig+0x274>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb0:	f7fe ffa4 	bl	8000afc <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb8:	f7fe ffa0 	bl	8000afc <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e160      	b.n	8001e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bca:	4b0d      	ldr	r3, [pc, #52]	@ (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f000 face 	bl	8002178 <RCC_Delay>
 8001bdc:	e01c      	b.n	8001c18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bde:	4b0a      	ldr	r3, [pc, #40]	@ (8001c08 <HAL_RCC_OscConfig+0x274>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be4:	f7fe ff8a 	bl	8000afc <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bea:	e00f      	b.n	8001c0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bec:	f7fe ff86 	bl	8000afc <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d908      	bls.n	8001c0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e146      	b.n	8001e8c <HAL_RCC_OscConfig+0x4f8>
 8001bfe:	bf00      	nop
 8001c00:	40021000 	.word	0x40021000
 8001c04:	42420000 	.word	0x42420000
 8001c08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c0c:	4b92      	ldr	r3, [pc, #584]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1e9      	bne.n	8001bec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 80a6 	beq.w	8001d72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2a:	4b8b      	ldr	r3, [pc, #556]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10d      	bne.n	8001c52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	4b88      	ldr	r3, [pc, #544]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	4a87      	ldr	r2, [pc, #540]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c40:	61d3      	str	r3, [r2, #28]
 8001c42:	4b85      	ldr	r3, [pc, #532]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c52:	4b82      	ldr	r3, [pc, #520]	@ (8001e5c <HAL_RCC_OscConfig+0x4c8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d118      	bne.n	8001c90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c5e:	4b7f      	ldr	r3, [pc, #508]	@ (8001e5c <HAL_RCC_OscConfig+0x4c8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a7e      	ldr	r2, [pc, #504]	@ (8001e5c <HAL_RCC_OscConfig+0x4c8>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c6a:	f7fe ff47 	bl	8000afc <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c72:	f7fe ff43 	bl	8000afc <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b64      	cmp	r3, #100	@ 0x64
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e103      	b.n	8001e8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c84:	4b75      	ldr	r3, [pc, #468]	@ (8001e5c <HAL_RCC_OscConfig+0x4c8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d106      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x312>
 8001c98:	4b6f      	ldr	r3, [pc, #444]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4a6e      	ldr	r2, [pc, #440]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6213      	str	r3, [r2, #32]
 8001ca4:	e02d      	b.n	8001d02 <HAL_RCC_OscConfig+0x36e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x334>
 8001cae:	4b6a      	ldr	r3, [pc, #424]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	4a69      	ldr	r2, [pc, #420]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001cb4:	f023 0301 	bic.w	r3, r3, #1
 8001cb8:	6213      	str	r3, [r2, #32]
 8001cba:	4b67      	ldr	r3, [pc, #412]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	4a66      	ldr	r2, [pc, #408]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	f023 0304 	bic.w	r3, r3, #4
 8001cc4:	6213      	str	r3, [r2, #32]
 8001cc6:	e01c      	b.n	8001d02 <HAL_RCC_OscConfig+0x36e>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	2b05      	cmp	r3, #5
 8001cce:	d10c      	bne.n	8001cea <HAL_RCC_OscConfig+0x356>
 8001cd0:	4b61      	ldr	r3, [pc, #388]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4a60      	ldr	r2, [pc, #384]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	6213      	str	r3, [r2, #32]
 8001cdc:	4b5e      	ldr	r3, [pc, #376]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4a5d      	ldr	r2, [pc, #372]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6213      	str	r3, [r2, #32]
 8001ce8:	e00b      	b.n	8001d02 <HAL_RCC_OscConfig+0x36e>
 8001cea:	4b5b      	ldr	r3, [pc, #364]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4a5a      	ldr	r2, [pc, #360]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	f023 0301 	bic.w	r3, r3, #1
 8001cf4:	6213      	str	r3, [r2, #32]
 8001cf6:	4b58      	ldr	r3, [pc, #352]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	4a57      	ldr	r2, [pc, #348]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	f023 0304 	bic.w	r3, r3, #4
 8001d00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d015      	beq.n	8001d36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0a:	f7fe fef7 	bl	8000afc <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f7fe fef3 	bl	8000afc <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e0b1      	b.n	8001e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d28:	4b4b      	ldr	r3, [pc, #300]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0ee      	beq.n	8001d12 <HAL_RCC_OscConfig+0x37e>
 8001d34:	e014      	b.n	8001d60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d36:	f7fe fee1 	bl	8000afc <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3c:	e00a      	b.n	8001d54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3e:	f7fe fedd 	bl	8000afc <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e09b      	b.n	8001e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d54:	4b40      	ldr	r3, [pc, #256]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1ee      	bne.n	8001d3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d60:	7dfb      	ldrb	r3, [r7, #23]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d105      	bne.n	8001d72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d66:	4b3c      	ldr	r3, [pc, #240]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	4a3b      	ldr	r2, [pc, #236]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 8087 	beq.w	8001e8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d7c:	4b36      	ldr	r3, [pc, #216]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d061      	beq.n	8001e4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d146      	bne.n	8001e1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d90:	4b33      	ldr	r3, [pc, #204]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d96:	f7fe feb1 	bl	8000afc <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9e:	f7fe fead 	bl	8000afc <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e06d      	b.n	8001e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db0:	4b29      	ldr	r3, [pc, #164]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f0      	bne.n	8001d9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dc4:	d108      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dc6:	4b24      	ldr	r3, [pc, #144]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	4921      	ldr	r1, [pc, #132]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a19      	ldr	r1, [r3, #32]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de8:	430b      	orrs	r3, r1
 8001dea:	491b      	ldr	r1, [pc, #108]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df6:	f7fe fe81 	bl	8000afc <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfe:	f7fe fe7d 	bl	8000afc <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e03d      	b.n	8001e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e10:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0f0      	beq.n	8001dfe <HAL_RCC_OscConfig+0x46a>
 8001e1c:	e035      	b.n	8001e8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1e:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7fe fe6a 	bl	8000afc <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7fe fe66 	bl	8000afc <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e026      	b.n	8001e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3e:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x498>
 8001e4a:	e01e      	b.n	8001e8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d107      	bne.n	8001e64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e019      	b.n	8001e8c <HAL_RCC_OscConfig+0x4f8>
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e64:	4b0b      	ldr	r3, [pc, #44]	@ (8001e94 <HAL_RCC_OscConfig+0x500>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d106      	bne.n	8001e86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d001      	beq.n	8001e8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021000 	.word	0x40021000

08001e98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0d0      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eac:	4b6a      	ldr	r3, [pc, #424]	@ (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d910      	bls.n	8001edc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eba:	4b67      	ldr	r3, [pc, #412]	@ (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 0207 	bic.w	r2, r3, #7
 8001ec2:	4965      	ldr	r1, [pc, #404]	@ (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eca:	4b63      	ldr	r3, [pc, #396]	@ (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0b8      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d020      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef4:	4b59      	ldr	r3, [pc, #356]	@ (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	4a58      	ldr	r2, [pc, #352]	@ (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001efe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f0c:	4b53      	ldr	r3, [pc, #332]	@ (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4a52      	ldr	r2, [pc, #328]	@ (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001f16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f18:	4b50      	ldr	r3, [pc, #320]	@ (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	494d      	ldr	r1, [pc, #308]	@ (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d040      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d107      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	4b47      	ldr	r3, [pc, #284]	@ (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d115      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e07f      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d107      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f56:	4b41      	ldr	r3, [pc, #260]	@ (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d109      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e073      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f66:	4b3d      	ldr	r3, [pc, #244]	@ (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e06b      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f76:	4b39      	ldr	r3, [pc, #228]	@ (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f023 0203 	bic.w	r2, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	4936      	ldr	r1, [pc, #216]	@ (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f88:	f7fe fdb8 	bl	8000afc <HAL_GetTick>
 8001f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8e:	e00a      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f90:	f7fe fdb4 	bl	8000afc <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e053      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 020c 	and.w	r2, r3, #12
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d1eb      	bne.n	8001f90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb8:	4b27      	ldr	r3, [pc, #156]	@ (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d210      	bcs.n	8001fe8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc6:	4b24      	ldr	r3, [pc, #144]	@ (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 0207 	bic.w	r2, r3, #7
 8001fce:	4922      	ldr	r1, [pc, #136]	@ (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd6:	4b20      	ldr	r3, [pc, #128]	@ (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e032      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff4:	4b19      	ldr	r3, [pc, #100]	@ (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4916      	ldr	r1, [pc, #88]	@ (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	4313      	orrs	r3, r2
 8002004:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002012:	4b12      	ldr	r3, [pc, #72]	@ (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	490e      	ldr	r1, [pc, #56]	@ (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002026:	f000 f821 	bl	800206c <HAL_RCC_GetSysClockFreq>
 800202a:	4602      	mov	r2, r0
 800202c:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	490a      	ldr	r1, [pc, #40]	@ (8002060 <HAL_RCC_ClockConfig+0x1c8>)
 8002038:	5ccb      	ldrb	r3, [r1, r3]
 800203a:	fa22 f303 	lsr.w	r3, r2, r3
 800203e:	4a09      	ldr	r2, [pc, #36]	@ (8002064 <HAL_RCC_ClockConfig+0x1cc>)
 8002040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002042:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <HAL_RCC_ClockConfig+0x1d0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fd16 	bl	8000a78 <HAL_InitTick>

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40022000 	.word	0x40022000
 800205c:	40021000 	.word	0x40021000
 8002060:	08004a54 	.word	0x08004a54
 8002064:	20000000 	.word	0x20000000
 8002068:	20000004 	.word	0x20000004

0800206c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002086:	4b1e      	ldr	r3, [pc, #120]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x94>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b04      	cmp	r3, #4
 8002094:	d002      	beq.n	800209c <HAL_RCC_GetSysClockFreq+0x30>
 8002096:	2b08      	cmp	r3, #8
 8002098:	d003      	beq.n	80020a2 <HAL_RCC_GetSysClockFreq+0x36>
 800209a:	e027      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800209c:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <HAL_RCC_GetSysClockFreq+0x98>)
 800209e:	613b      	str	r3, [r7, #16]
      break;
 80020a0:	e027      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	0c9b      	lsrs	r3, r3, #18
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	4a17      	ldr	r2, [pc, #92]	@ (8002108 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020ac:	5cd3      	ldrb	r3, [r2, r3]
 80020ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d010      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020ba:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x94>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	0c5b      	lsrs	r3, r3, #17
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	4a11      	ldr	r2, [pc, #68]	@ (800210c <HAL_RCC_GetSysClockFreq+0xa0>)
 80020c6:	5cd3      	ldrb	r3, [r2, r3]
 80020c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002104 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ce:	fb03 f202 	mul.w	r2, r3, r2
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	e004      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a0c      	ldr	r2, [pc, #48]	@ (8002110 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020e0:	fb02 f303 	mul.w	r3, r2, r3
 80020e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	613b      	str	r3, [r7, #16]
      break;
 80020ea:	e002      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020ec:	4b05      	ldr	r3, [pc, #20]	@ (8002104 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ee:	613b      	str	r3, [r7, #16]
      break;
 80020f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020f2:	693b      	ldr	r3, [r7, #16]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	371c      	adds	r7, #28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	007a1200 	.word	0x007a1200
 8002108:	08004a6c 	.word	0x08004a6c
 800210c:	08004a7c 	.word	0x08004a7c
 8002110:	003d0900 	.word	0x003d0900

08002114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002118:	4b02      	ldr	r3, [pc, #8]	@ (8002124 <HAL_RCC_GetHCLKFreq+0x10>)
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	20000000 	.word	0x20000000

08002128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800212c:	f7ff fff2 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 8002130:	4602      	mov	r2, r0
 8002132:	4b05      	ldr	r3, [pc, #20]	@ (8002148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	4903      	ldr	r1, [pc, #12]	@ (800214c <HAL_RCC_GetPCLK1Freq+0x24>)
 800213e:	5ccb      	ldrb	r3, [r1, r3]
 8002140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40021000 	.word	0x40021000
 800214c:	08004a64 	.word	0x08004a64

08002150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002154:	f7ff ffde 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 8002158:	4602      	mov	r2, r0
 800215a:	4b05      	ldr	r3, [pc, #20]	@ (8002170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	0adb      	lsrs	r3, r3, #11
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	4903      	ldr	r1, [pc, #12]	@ (8002174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002166:	5ccb      	ldrb	r3, [r1, r3]
 8002168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800216c:	4618      	mov	r0, r3
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000
 8002174:	08004a64 	.word	0x08004a64

08002178 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002180:	4b0a      	ldr	r3, [pc, #40]	@ (80021ac <RCC_Delay+0x34>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <RCC_Delay+0x38>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	0a5b      	lsrs	r3, r3, #9
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	fb02 f303 	mul.w	r3, r2, r3
 8002192:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002194:	bf00      	nop
  }
  while (Delay --);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1e5a      	subs	r2, r3, #1
 800219a:	60fa      	str	r2, [r7, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f9      	bne.n	8002194 <RCC_Delay+0x1c>
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr
 80021ac:	20000000 	.word	0x20000000
 80021b0:	10624dd3 	.word	0x10624dd3

080021b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d07d      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80021d0:	2300      	movs	r3, #0
 80021d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10d      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ea:	61d3      	str	r3, [r2, #28]
 80021ec:	4b49      	ldr	r3, [pc, #292]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f8:	2301      	movs	r3, #1
 80021fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fc:	4b46      	ldr	r3, [pc, #280]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002204:	2b00      	cmp	r3, #0
 8002206:	d118      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002208:	4b43      	ldr	r3, [pc, #268]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a42      	ldr	r2, [pc, #264]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800220e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002212:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002214:	f7fe fc72 	bl	8000afc <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221a:	e008      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221c:	f7fe fc6e 	bl	8000afc <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b64      	cmp	r3, #100	@ 0x64
 8002228:	d901      	bls.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e06d      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222e:	4b3a      	ldr	r3, [pc, #232]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800223a:	4b36      	ldr	r3, [pc, #216]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002242:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d02e      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	429a      	cmp	r2, r3
 8002256:	d027      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002258:	4b2e      	ldr	r3, [pc, #184]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002260:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002262:	4b2e      	ldr	r3, [pc, #184]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002264:	2201      	movs	r2, #1
 8002266:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002268:	4b2c      	ldr	r3, [pc, #176]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800226e:	4a29      	ldr	r2, [pc, #164]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d014      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227e:	f7fe fc3d 	bl	8000afc <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002284:	e00a      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7fe fc39 	bl	8000afc <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002294:	4293      	cmp	r3, r2
 8002296:	d901      	bls.n	800229c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e036      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229c:	4b1d      	ldr	r3, [pc, #116]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0ee      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	4917      	ldr	r1, [pc, #92]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022ba:	7dfb      	ldrb	r3, [r7, #23]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d105      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c0:	4b14      	ldr	r3, [pc, #80]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	4a13      	ldr	r2, [pc, #76]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	490b      	ldr	r1, [pc, #44]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0310 	and.w	r3, r3, #16
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d008      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022f6:	4b07      	ldr	r3, [pc, #28]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	4904      	ldr	r1, [pc, #16]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002304:	4313      	orrs	r3, r2
 8002306:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	40007000 	.word	0x40007000
 800231c:	42420440 	.word	0x42420440

08002320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e041      	b.n	80023b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7fe fa8a 	bl	8000860 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3304      	adds	r3, #4
 800235c:	4619      	mov	r1, r3
 800235e:	4610      	mov	r0, r2
 8002360:	f000 fab2 	bl	80028c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e041      	b.n	8002454 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d106      	bne.n	80023ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f839 	bl	800245c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2202      	movs	r2, #2
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3304      	adds	r3, #4
 80023fa:	4619      	mov	r1, r3
 80023fc:	4610      	mov	r0, r2
 80023fe:	f000 fa63 	bl	80028c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
	...

08002470 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d109      	bne.n	8002494 <HAL_TIM_PWM_Start+0x24>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b01      	cmp	r3, #1
 800248a:	bf14      	ite	ne
 800248c:	2301      	movne	r3, #1
 800248e:	2300      	moveq	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	e022      	b.n	80024da <HAL_TIM_PWM_Start+0x6a>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	2b04      	cmp	r3, #4
 8002498:	d109      	bne.n	80024ae <HAL_TIM_PWM_Start+0x3e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	bf14      	ite	ne
 80024a6:	2301      	movne	r3, #1
 80024a8:	2300      	moveq	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	e015      	b.n	80024da <HAL_TIM_PWM_Start+0x6a>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d109      	bne.n	80024c8 <HAL_TIM_PWM_Start+0x58>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b01      	cmp	r3, #1
 80024be:	bf14      	ite	ne
 80024c0:	2301      	movne	r3, #1
 80024c2:	2300      	moveq	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	e008      	b.n	80024da <HAL_TIM_PWM_Start+0x6a>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	bf14      	ite	ne
 80024d4:	2301      	movne	r3, #1
 80024d6:	2300      	moveq	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e05e      	b.n	80025a0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d104      	bne.n	80024f2 <HAL_TIM_PWM_Start+0x82>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024f0:	e013      	b.n	800251a <HAL_TIM_PWM_Start+0xaa>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d104      	bne.n	8002502 <HAL_TIM_PWM_Start+0x92>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002500:	e00b      	b.n	800251a <HAL_TIM_PWM_Start+0xaa>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2b08      	cmp	r3, #8
 8002506:	d104      	bne.n	8002512 <HAL_TIM_PWM_Start+0xa2>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002510:	e003      	b.n	800251a <HAL_TIM_PWM_Start+0xaa>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2202      	movs	r2, #2
 8002516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2201      	movs	r2, #1
 8002520:	6839      	ldr	r1, [r7, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fc50 	bl	8002dc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a1e      	ldr	r2, [pc, #120]	@ (80025a8 <HAL_TIM_PWM_Start+0x138>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d107      	bne.n	8002542 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002540:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a18      	ldr	r2, [pc, #96]	@ (80025a8 <HAL_TIM_PWM_Start+0x138>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d00e      	beq.n	800256a <HAL_TIM_PWM_Start+0xfa>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002554:	d009      	beq.n	800256a <HAL_TIM_PWM_Start+0xfa>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a14      	ldr	r2, [pc, #80]	@ (80025ac <HAL_TIM_PWM_Start+0x13c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d004      	beq.n	800256a <HAL_TIM_PWM_Start+0xfa>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a12      	ldr	r2, [pc, #72]	@ (80025b0 <HAL_TIM_PWM_Start+0x140>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d111      	bne.n	800258e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b06      	cmp	r3, #6
 800257a:	d010      	beq.n	800259e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800258c:	e007      	b.n	800259e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 0201 	orr.w	r2, r2, #1
 800259c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40012c00 	.word	0x40012c00
 80025ac:	40000400 	.word	0x40000400
 80025b0:	40000800 	.word	0x40000800

080025b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e0ae      	b.n	8002730 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b0c      	cmp	r3, #12
 80025de:	f200 809f 	bhi.w	8002720 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80025e2:	a201      	add	r2, pc, #4	@ (adr r2, 80025e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80025e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e8:	0800261d 	.word	0x0800261d
 80025ec:	08002721 	.word	0x08002721
 80025f0:	08002721 	.word	0x08002721
 80025f4:	08002721 	.word	0x08002721
 80025f8:	0800265d 	.word	0x0800265d
 80025fc:	08002721 	.word	0x08002721
 8002600:	08002721 	.word	0x08002721
 8002604:	08002721 	.word	0x08002721
 8002608:	0800269f 	.word	0x0800269f
 800260c:	08002721 	.word	0x08002721
 8002610:	08002721 	.word	0x08002721
 8002614:	08002721 	.word	0x08002721
 8002618:	080026df 	.word	0x080026df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68b9      	ldr	r1, [r7, #8]
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f9b2 	bl	800298c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0208 	orr.w	r2, r2, #8
 8002636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699a      	ldr	r2, [r3, #24]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0204 	bic.w	r2, r2, #4
 8002646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6999      	ldr	r1, [r3, #24]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	691a      	ldr	r2, [r3, #16]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	619a      	str	r2, [r3, #24]
      break;
 800265a:	e064      	b.n	8002726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f9f8 	bl	8002a58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699a      	ldr	r2, [r3, #24]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6999      	ldr	r1, [r3, #24]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	021a      	lsls	r2, r3, #8
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	619a      	str	r2, [r3, #24]
      break;
 800269c:	e043      	b.n	8002726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68b9      	ldr	r1, [r7, #8]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 fa41 	bl	8002b2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	69da      	ldr	r2, [r3, #28]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0208 	orr.w	r2, r2, #8
 80026b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	69da      	ldr	r2, [r3, #28]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0204 	bic.w	r2, r2, #4
 80026c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	69d9      	ldr	r1, [r3, #28]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	61da      	str	r2, [r3, #28]
      break;
 80026dc:	e023      	b.n	8002726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 fa8b 	bl	8002c00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	69da      	ldr	r2, [r3, #28]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69da      	ldr	r2, [r3, #28]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	69d9      	ldr	r1, [r3, #28]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	021a      	lsls	r2, r3, #8
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	61da      	str	r2, [r3, #28]
      break;
 800271e:	e002      	b.n	8002726 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	75fb      	strb	r3, [r7, #23]
      break;
 8002724:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800272e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_TIM_ConfigClockSource+0x1c>
 8002750:	2302      	movs	r3, #2
 8002752:	e0b4      	b.n	80028be <HAL_TIM_ConfigClockSource+0x186>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800277a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800278c:	d03e      	beq.n	800280c <HAL_TIM_ConfigClockSource+0xd4>
 800278e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002792:	f200 8087 	bhi.w	80028a4 <HAL_TIM_ConfigClockSource+0x16c>
 8002796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800279a:	f000 8086 	beq.w	80028aa <HAL_TIM_ConfigClockSource+0x172>
 800279e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027a2:	d87f      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x16c>
 80027a4:	2b70      	cmp	r3, #112	@ 0x70
 80027a6:	d01a      	beq.n	80027de <HAL_TIM_ConfigClockSource+0xa6>
 80027a8:	2b70      	cmp	r3, #112	@ 0x70
 80027aa:	d87b      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x16c>
 80027ac:	2b60      	cmp	r3, #96	@ 0x60
 80027ae:	d050      	beq.n	8002852 <HAL_TIM_ConfigClockSource+0x11a>
 80027b0:	2b60      	cmp	r3, #96	@ 0x60
 80027b2:	d877      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x16c>
 80027b4:	2b50      	cmp	r3, #80	@ 0x50
 80027b6:	d03c      	beq.n	8002832 <HAL_TIM_ConfigClockSource+0xfa>
 80027b8:	2b50      	cmp	r3, #80	@ 0x50
 80027ba:	d873      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x16c>
 80027bc:	2b40      	cmp	r3, #64	@ 0x40
 80027be:	d058      	beq.n	8002872 <HAL_TIM_ConfigClockSource+0x13a>
 80027c0:	2b40      	cmp	r3, #64	@ 0x40
 80027c2:	d86f      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x16c>
 80027c4:	2b30      	cmp	r3, #48	@ 0x30
 80027c6:	d064      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0x15a>
 80027c8:	2b30      	cmp	r3, #48	@ 0x30
 80027ca:	d86b      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x16c>
 80027cc:	2b20      	cmp	r3, #32
 80027ce:	d060      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0x15a>
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d867      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x16c>
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d05c      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0x15a>
 80027d8:	2b10      	cmp	r3, #16
 80027da:	d05a      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0x15a>
 80027dc:	e062      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027ee:	f000 facc 	bl	8002d8a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002800:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	609a      	str	r2, [r3, #8]
      break;
 800280a:	e04f      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800281c:	f000 fab5 	bl	8002d8a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800282e:	609a      	str	r2, [r3, #8]
      break;
 8002830:	e03c      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800283e:	461a      	mov	r2, r3
 8002840:	f000 fa2c 	bl	8002c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2150      	movs	r1, #80	@ 0x50
 800284a:	4618      	mov	r0, r3
 800284c:	f000 fa83 	bl	8002d56 <TIM_ITRx_SetConfig>
      break;
 8002850:	e02c      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800285e:	461a      	mov	r2, r3
 8002860:	f000 fa4a 	bl	8002cf8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2160      	movs	r1, #96	@ 0x60
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fa73 	bl	8002d56 <TIM_ITRx_SetConfig>
      break;
 8002870:	e01c      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800287e:	461a      	mov	r2, r3
 8002880:	f000 fa0c 	bl	8002c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2140      	movs	r1, #64	@ 0x40
 800288a:	4618      	mov	r0, r3
 800288c:	f000 fa63 	bl	8002d56 <TIM_ITRx_SetConfig>
      break;
 8002890:	e00c      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4619      	mov	r1, r3
 800289c:	4610      	mov	r0, r2
 800289e:	f000 fa5a 	bl	8002d56 <TIM_ITRx_SetConfig>
      break;
 80028a2:	e003      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
      break;
 80028a8:	e000      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a29      	ldr	r2, [pc, #164]	@ (8002980 <TIM_Base_SetConfig+0xb8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00b      	beq.n	80028f8 <TIM_Base_SetConfig+0x30>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e6:	d007      	beq.n	80028f8 <TIM_Base_SetConfig+0x30>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a26      	ldr	r2, [pc, #152]	@ (8002984 <TIM_Base_SetConfig+0xbc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d003      	beq.n	80028f8 <TIM_Base_SetConfig+0x30>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a25      	ldr	r2, [pc, #148]	@ (8002988 <TIM_Base_SetConfig+0xc0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d108      	bne.n	800290a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a1c      	ldr	r2, [pc, #112]	@ (8002980 <TIM_Base_SetConfig+0xb8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00b      	beq.n	800292a <TIM_Base_SetConfig+0x62>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002918:	d007      	beq.n	800292a <TIM_Base_SetConfig+0x62>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a19      	ldr	r2, [pc, #100]	@ (8002984 <TIM_Base_SetConfig+0xbc>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d003      	beq.n	800292a <TIM_Base_SetConfig+0x62>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a18      	ldr	r2, [pc, #96]	@ (8002988 <TIM_Base_SetConfig+0xc0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d108      	bne.n	800293c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a07      	ldr	r2, [pc, #28]	@ (8002980 <TIM_Base_SetConfig+0xb8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d103      	bne.n	8002970 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	615a      	str	r2, [r3, #20]
}
 8002976:	bf00      	nop
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	40012c00 	.word	0x40012c00
 8002984:	40000400 	.word	0x40000400
 8002988:	40000800 	.word	0x40000800

0800298c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	f023 0201 	bic.w	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f023 0303 	bic.w	r3, r3, #3
 80029c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f023 0302 	bic.w	r3, r3, #2
 80029d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4313      	orrs	r3, r2
 80029de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a54 <TIM_OC1_SetConfig+0xc8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d10c      	bne.n	8002a02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f023 0308 	bic.w	r3, r3, #8
 80029ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f023 0304 	bic.w	r3, r3, #4
 8002a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a13      	ldr	r2, [pc, #76]	@ (8002a54 <TIM_OC1_SetConfig+0xc8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d111      	bne.n	8002a2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	621a      	str	r2, [r3, #32]
}
 8002a48:	bf00      	nop
 8002a4a:	371c      	adds	r7, #28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40012c00 	.word	0x40012c00

08002a58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	f023 0210 	bic.w	r2, r3, #16
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	021b      	lsls	r3, r3, #8
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f023 0320 	bic.w	r3, r3, #32
 8002aa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	@ (8002b28 <TIM_OC2_SetConfig+0xd0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d10d      	bne.n	8002ad4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ad2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a14      	ldr	r2, [pc, #80]	@ (8002b28 <TIM_OC2_SetConfig+0xd0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d113      	bne.n	8002b04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ae2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002aea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	621a      	str	r2, [r3, #32]
}
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr
 8002b28:	40012c00 	.word	0x40012c00

08002b2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f023 0303 	bic.w	r3, r3, #3
 8002b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a1d      	ldr	r2, [pc, #116]	@ (8002bfc <TIM_OC3_SetConfig+0xd0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d10d      	bne.n	8002ba6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a14      	ldr	r2, [pc, #80]	@ (8002bfc <TIM_OC3_SetConfig+0xd0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d113      	bne.n	8002bd6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	621a      	str	r2, [r3, #32]
}
 8002bf0:	bf00      	nop
 8002bf2:	371c      	adds	r7, #28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40012c00 	.word	0x40012c00

08002c00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	031b      	lsls	r3, r3, #12
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8002c98 <TIM_OC4_SetConfig+0x98>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d109      	bne.n	8002c74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	019b      	lsls	r3, r3, #6
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	621a      	str	r2, [r3, #32]
}
 8002c8e:	bf00      	nop
 8002c90:	371c      	adds	r7, #28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	40012c00 	.word	0x40012c00

08002c9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	f023 0201 	bic.w	r2, r3, #1
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f023 030a 	bic.w	r3, r3, #10
 8002cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	621a      	str	r2, [r3, #32]
}
 8002cee:	bf00      	nop
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	f023 0210 	bic.w	r2, r3, #16
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	031b      	lsls	r3, r3, #12
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d34:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	621a      	str	r2, [r3, #32]
}
 8002d4c:	bf00      	nop
 8002d4e:	371c      	adds	r7, #28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b085      	sub	sp, #20
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f043 0307 	orr.w	r3, r3, #7
 8002d78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	609a      	str	r2, [r3, #8]
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr

08002d8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b087      	sub	sp, #28
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002da4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	021a      	lsls	r2, r3, #8
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	431a      	orrs	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	609a      	str	r2, [r3, #8]
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	2201      	movs	r2, #1
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a1a      	ldr	r2, [r3, #32]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	401a      	ands	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a1a      	ldr	r2, [r3, #32]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002e00:	431a      	orrs	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	621a      	str	r2, [r3, #32]
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e046      	b.n	8002eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a16      	ldr	r2, [pc, #88]	@ (8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d00e      	beq.n	8002e8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e74:	d009      	beq.n	8002e8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a12      	ldr	r2, [pc, #72]	@ (8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d004      	beq.n	8002e8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a10      	ldr	r2, [pc, #64]	@ (8002ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d10c      	bne.n	8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	40012c00 	.word	0x40012c00
 8002ec4:	40000400 	.word	0x40000400
 8002ec8:	40000800 	.word	0x40000800

08002ecc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e03d      	b.n	8002f64 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr

08002f6e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e042      	b.n	8003006 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d106      	bne.n	8002f9a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7fd fcdf 	bl	8000958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2224      	movs	r2, #36	@ 0x24
 8002f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fb0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 fd70 	bl	8003a98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fc6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fd6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fe6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b08a      	sub	sp, #40	@ 0x28
 8003012:	af02      	add	r7, sp, #8
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	603b      	str	r3, [r7, #0]
 800301a:	4613      	mov	r3, r2
 800301c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b20      	cmp	r3, #32
 800302c:	d16d      	bne.n	800310a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <HAL_UART_Transmit+0x2c>
 8003034:	88fb      	ldrh	r3, [r7, #6]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e066      	b.n	800310c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2221      	movs	r2, #33	@ 0x21
 8003048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800304c:	f7fd fd56 	bl	8000afc <HAL_GetTick>
 8003050:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	88fa      	ldrh	r2, [r7, #6]
 8003056:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	88fa      	ldrh	r2, [r7, #6]
 800305c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003066:	d108      	bne.n	800307a <HAL_UART_Transmit+0x6c>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d104      	bne.n	800307a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003070:	2300      	movs	r3, #0
 8003072:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	61bb      	str	r3, [r7, #24]
 8003078:	e003      	b.n	8003082 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800307e:	2300      	movs	r3, #0
 8003080:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003082:	e02a      	b.n	80030da <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2200      	movs	r2, #0
 800308c:	2180      	movs	r1, #128	@ 0x80
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 faf8 	bl	8003684 <UART_WaitOnFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e036      	b.n	800310c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10b      	bne.n	80030bc <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030b2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	3302      	adds	r3, #2
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	e007      	b.n	80030cc <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	781a      	ldrb	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3301      	adds	r3, #1
 80030ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1cf      	bne.n	8003084 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	2200      	movs	r2, #0
 80030ec:	2140      	movs	r1, #64	@ 0x40
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fac8 	bl	8003684 <UART_WaitOnFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e006      	b.n	800310c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	e000      	b.n	800310c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800310a:	2302      	movs	r3, #2
  }
}
 800310c:	4618      	mov	r0, r3
 800310e:	3720      	adds	r7, #32
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b0ba      	sub	sp, #232	@ 0xe8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800313a:	2300      	movs	r3, #0
 800313c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003140:	2300      	movs	r3, #0
 8003142:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10f      	bne.n	800317a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800315a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <HAL_UART_IRQHandler+0x66>
 8003166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800316a:	f003 0320 	and.w	r3, r3, #32
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fbd1 	bl	800391a <UART_Receive_IT>
      return;
 8003178:	e25b      	b.n	8003632 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800317a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 80de 	beq.w	8003340 <HAL_UART_IRQHandler+0x22c>
 8003184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d106      	bne.n	800319e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003194:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80d1 	beq.w	8003340 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800319e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_UART_IRQHandler+0xae>
 80031aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ba:	f043 0201 	orr.w	r2, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00b      	beq.n	80031e6 <HAL_UART_IRQHandler+0xd2>
 80031ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031de:	f043 0202 	orr.w	r2, r3, #2
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <HAL_UART_IRQHandler+0xf6>
 80031f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003202:	f043 0204 	orr.w	r2, r3, #4
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800320a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d011      	beq.n	800323a <HAL_UART_IRQHandler+0x126>
 8003216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b00      	cmp	r3, #0
 8003220:	d105      	bne.n	800322e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d005      	beq.n	800323a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003232:	f043 0208 	orr.w	r2, r3, #8
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 81f2 	beq.w	8003628 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b00      	cmp	r3, #0
 800324e:	d008      	beq.n	8003262 <HAL_UART_IRQHandler+0x14e>
 8003250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 fb5c 	bl	800391a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf14      	ite	ne
 8003270:	2301      	movne	r3, #1
 8003272:	2300      	moveq	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d103      	bne.n	800328e <HAL_UART_IRQHandler+0x17a>
 8003286:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d04f      	beq.n	800332e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fa66 	bl	8003760 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d041      	beq.n	8003326 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	3314      	adds	r3, #20
 80032a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032b0:	e853 3f00 	ldrex	r3, [r3]
 80032b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80032b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3314      	adds	r3, #20
 80032ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032de:	e841 2300 	strex	r3, r2, [r1]
 80032e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1d9      	bne.n	80032a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d013      	beq.n	800331e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032fa:	4a7e      	ldr	r2, [pc, #504]	@ (80034f4 <HAL_UART_IRQHandler+0x3e0>)
 80032fc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe f94a 	bl	800159c <HAL_DMA_Abort_IT>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d016      	beq.n	800333c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003318:	4610      	mov	r0, r2
 800331a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331c:	e00e      	b.n	800333c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f99c 	bl	800365c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003324:	e00a      	b.n	800333c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f998 	bl	800365c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800332c:	e006      	b.n	800333c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f994 	bl	800365c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800333a:	e175      	b.n	8003628 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333c:	bf00      	nop
    return;
 800333e:	e173      	b.n	8003628 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003344:	2b01      	cmp	r3, #1
 8003346:	f040 814f 	bne.w	80035e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800334a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 8148 	beq.w	80035e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 8141 	beq.w	80035e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003366:	2300      	movs	r3, #0
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 80b6 	beq.w	80034f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003398:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 8145 	beq.w	800362c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033aa:	429a      	cmp	r2, r3
 80033ac:	f080 813e 	bcs.w	800362c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2b20      	cmp	r3, #32
 80033c0:	f000 8088 	beq.w	80034d4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	330c      	adds	r3, #12
 80033ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033d2:	e853 3f00 	ldrex	r3, [r3]
 80033d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	330c      	adds	r3, #12
 80033ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80033f0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80033fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003400:	e841 2300 	strex	r3, r2, [r1]
 8003404:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003408:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1d9      	bne.n	80033c4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3314      	adds	r3, #20
 8003416:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003418:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800341a:	e853 3f00 	ldrex	r3, [r3]
 800341e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003420:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003422:	f023 0301 	bic.w	r3, r3, #1
 8003426:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3314      	adds	r3, #20
 8003430:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003434:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003438:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800343c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003440:	e841 2300 	strex	r3, r2, [r1]
 8003444:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003446:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1e1      	bne.n	8003410 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	3314      	adds	r3, #20
 8003452:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003454:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003456:	e853 3f00 	ldrex	r3, [r3]
 800345a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800345c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800345e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003462:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	3314      	adds	r3, #20
 800346c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003470:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003472:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003474:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003476:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003478:	e841 2300 	strex	r3, r2, [r1]
 800347c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800347e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e3      	bne.n	800344c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	330c      	adds	r3, #12
 8003498:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800349c:	e853 3f00 	ldrex	r3, [r3]
 80034a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80034a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034a4:	f023 0310 	bic.w	r3, r3, #16
 80034a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	330c      	adds	r3, #12
 80034b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80034b6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80034b8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80034c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e3      	bne.n	8003492 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe f829 	bl	8001526 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	4619      	mov	r1, r3
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f8bf 	bl	800366e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034f0:	e09c      	b.n	800362c <HAL_UART_IRQHandler+0x518>
 80034f2:	bf00      	nop
 80034f4:	08003825 	.word	0x08003825
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003500:	b29b      	uxth	r3, r3
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 808e 	beq.w	8003630 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003514:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 8089 	beq.w	8003630 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	330c      	adds	r3, #12
 8003524:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800352e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003530:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003534:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	330c      	adds	r3, #12
 800353e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003542:	647a      	str	r2, [r7, #68]	@ 0x44
 8003544:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003546:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003548:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800354a:	e841 2300 	strex	r3, r2, [r1]
 800354e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1e3      	bne.n	800351e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3314      	adds	r3, #20
 800355c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003560:	e853 3f00 	ldrex	r3, [r3]
 8003564:	623b      	str	r3, [r7, #32]
   return(result);
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	f023 0301 	bic.w	r3, r3, #1
 800356c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3314      	adds	r3, #20
 8003576:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800357a:	633a      	str	r2, [r7, #48]	@ 0x30
 800357c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003582:	e841 2300 	strex	r3, r2, [r1]
 8003586:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1e3      	bne.n	8003556 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	330c      	adds	r3, #12
 80035a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	e853 3f00 	ldrex	r3, [r3]
 80035aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0310 	bic.w	r3, r3, #16
 80035b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	330c      	adds	r3, #12
 80035bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80035c0:	61fa      	str	r2, [r7, #28]
 80035c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c4:	69b9      	ldr	r1, [r7, #24]
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	e841 2300 	strex	r3, r2, [r1]
 80035cc:	617b      	str	r3, [r7, #20]
   return(result);
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e3      	bne.n	800359c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035de:	4619      	mov	r1, r3
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f844 	bl	800366e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035e6:	e023      	b.n	8003630 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d009      	beq.n	8003608 <HAL_UART_IRQHandler+0x4f4>
 80035f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f923 	bl	800384c <UART_Transmit_IT>
    return;
 8003606:	e014      	b.n	8003632 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800360c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00e      	beq.n	8003632 <HAL_UART_IRQHandler+0x51e>
 8003614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f962 	bl	80038ea <UART_EndTransmit_IT>
    return;
 8003626:	e004      	b.n	8003632 <HAL_UART_IRQHandler+0x51e>
    return;
 8003628:	bf00      	nop
 800362a:	e002      	b.n	8003632 <HAL_UART_IRQHandler+0x51e>
      return;
 800362c:	bf00      	nop
 800362e:	e000      	b.n	8003632 <HAL_UART_IRQHandler+0x51e>
      return;
 8003630:	bf00      	nop
  }
}
 8003632:	37e8      	adds	r7, #232	@ 0xe8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr

0800364a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr

0800366e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	460b      	mov	r3, r1
 8003678:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b090      	sub	sp, #64	@ 0x40
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	4613      	mov	r3, r2
 8003692:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003694:	e050      	b.n	8003738 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d04c      	beq.n	8003738 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800369e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d007      	beq.n	80036b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80036a4:	f7fd fa2a 	bl	8000afc <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d241      	bcs.n	8003738 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	330c      	adds	r3, #12
 80036ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036be:	e853 3f00 	ldrex	r3, [r3]
 80036c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80036ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	330c      	adds	r3, #12
 80036d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036d4:	637a      	str	r2, [r7, #52]	@ 0x34
 80036d6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036dc:	e841 2300 	strex	r3, r2, [r1]
 80036e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80036e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e5      	bne.n	80036b4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3314      	adds	r3, #20
 80036ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	e853 3f00 	ldrex	r3, [r3]
 80036f6:	613b      	str	r3, [r7, #16]
   return(result);
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f023 0301 	bic.w	r3, r3, #1
 80036fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3314      	adds	r3, #20
 8003706:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003708:	623a      	str	r2, [r7, #32]
 800370a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370c:	69f9      	ldr	r1, [r7, #28]
 800370e:	6a3a      	ldr	r2, [r7, #32]
 8003710:	e841 2300 	strex	r3, r2, [r1]
 8003714:	61bb      	str	r3, [r7, #24]
   return(result);
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1e5      	bne.n	80036e8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e00f      	b.n	8003758 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4013      	ands	r3, r2
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	429a      	cmp	r2, r3
 8003746:	bf0c      	ite	eq
 8003748:	2301      	moveq	r3, #1
 800374a:	2300      	movne	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	429a      	cmp	r2, r3
 8003754:	d09f      	beq.n	8003696 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3740      	adds	r7, #64	@ 0x40
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003760:	b480      	push	{r7}
 8003762:	b095      	sub	sp, #84	@ 0x54
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	330c      	adds	r3, #12
 800376e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003772:	e853 3f00 	ldrex	r3, [r3]
 8003776:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800377e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	330c      	adds	r3, #12
 8003786:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003788:	643a      	str	r2, [r7, #64]	@ 0x40
 800378a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800378e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003790:	e841 2300 	strex	r3, r2, [r1]
 8003794:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e5      	bne.n	8003768 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3314      	adds	r3, #20
 80037a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	e853 3f00 	ldrex	r3, [r3]
 80037aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f023 0301 	bic.w	r3, r3, #1
 80037b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3314      	adds	r3, #20
 80037ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037c4:	e841 2300 	strex	r3, r2, [r1]
 80037c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1e5      	bne.n	800379c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d119      	bne.n	800380c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	330c      	adds	r3, #12
 80037de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	e853 3f00 	ldrex	r3, [r3]
 80037e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f023 0310 	bic.w	r3, r3, #16
 80037ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	330c      	adds	r3, #12
 80037f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037f8:	61ba      	str	r2, [r7, #24]
 80037fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fc:	6979      	ldr	r1, [r7, #20]
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	e841 2300 	strex	r3, r2, [r1]
 8003804:	613b      	str	r3, [r7, #16]
   return(result);
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e5      	bne.n	80037d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800381a:	bf00      	nop
 800381c:	3754      	adds	r7, #84	@ 0x54
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003830:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f7ff ff0c 	bl	800365c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b21      	cmp	r3, #33	@ 0x21
 800385e:	d13e      	bne.n	80038de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003868:	d114      	bne.n	8003894 <UART_Transmit_IT+0x48>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d110      	bne.n	8003894 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003886:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	1c9a      	adds	r2, r3, #2
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	621a      	str	r2, [r3, #32]
 8003892:	e008      	b.n	80038a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	1c59      	adds	r1, r3, #1
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6211      	str	r1, [r2, #32]
 800389e:	781a      	ldrb	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	4619      	mov	r1, r3
 80038b4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10f      	bne.n	80038da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	e000      	b.n	80038e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038de:	2302      	movs	r3, #2
  }
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr

080038ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003900:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff fe94 	bl	8003638 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b08c      	sub	sp, #48	@ 0x30
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b22      	cmp	r3, #34	@ 0x22
 800392c:	f040 80ae 	bne.w	8003a8c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003938:	d117      	bne.n	800396a <UART_Receive_IT+0x50>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d113      	bne.n	800396a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003942:	2300      	movs	r3, #0
 8003944:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	b29b      	uxth	r3, r3
 8003954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003958:	b29a      	uxth	r2, r3
 800395a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003962:	1c9a      	adds	r2, r3, #2
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	629a      	str	r2, [r3, #40]	@ 0x28
 8003968:	e026      	b.n	80039b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800396e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003970:	2300      	movs	r3, #0
 8003972:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800397c:	d007      	beq.n	800398e <UART_Receive_IT+0x74>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10a      	bne.n	800399c <UART_Receive_IT+0x82>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	b2da      	uxtb	r2, r3
 8003996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003998:	701a      	strb	r2, [r3, #0]
 800399a:	e008      	b.n	80039ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039bc:	b29b      	uxth	r3, r3
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	4619      	mov	r1, r3
 80039c6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d15d      	bne.n	8003a88 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0220 	bic.w	r2, r2, #32
 80039da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695a      	ldr	r2, [r3, #20]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d135      	bne.n	8003a7e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	330c      	adds	r3, #12
 8003a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	613b      	str	r3, [r7, #16]
   return(result);
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f023 0310 	bic.w	r3, r3, #16
 8003a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	330c      	adds	r3, #12
 8003a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a38:	623a      	str	r2, [r7, #32]
 8003a3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3c:	69f9      	ldr	r1, [r7, #28]
 8003a3e:	6a3a      	ldr	r2, [r7, #32]
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e5      	bne.n	8003a18 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	2b10      	cmp	r3, #16
 8003a58:	d10a      	bne.n	8003a70 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a74:	4619      	mov	r1, r3
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff fdf9 	bl	800366e <HAL_UARTEx_RxEventCallback>
 8003a7c:	e002      	b.n	8003a84 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff fde3 	bl	800364a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	e002      	b.n	8003a8e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e000      	b.n	8003a8e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a8c:	2302      	movs	r3, #2
  }
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3730      	adds	r7, #48	@ 0x30
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003ad2:	f023 030c 	bic.w	r3, r3, #12
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	430b      	orrs	r3, r1
 8003ade:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a2c      	ldr	r2, [pc, #176]	@ (8003bac <UART_SetConfig+0x114>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d103      	bne.n	8003b08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b00:	f7fe fb26 	bl	8002150 <HAL_RCC_GetPCLK2Freq>
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	e002      	b.n	8003b0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b08:	f7fe fb0e 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8003b0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	009a      	lsls	r2, r3, #2
 8003b18:	441a      	add	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b24:	4a22      	ldr	r2, [pc, #136]	@ (8003bb0 <UART_SetConfig+0x118>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	0119      	lsls	r1, r3, #4
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4613      	mov	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	009a      	lsls	r2, r3, #2
 8003b38:	441a      	add	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b44:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb0 <UART_SetConfig+0x118>)
 8003b46:	fba3 0302 	umull	r0, r3, r3, r2
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	2064      	movs	r0, #100	@ 0x64
 8003b4e:	fb00 f303 	mul.w	r3, r0, r3
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	3332      	adds	r3, #50	@ 0x32
 8003b58:	4a15      	ldr	r2, [pc, #84]	@ (8003bb0 <UART_SetConfig+0x118>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b64:	4419      	add	r1, r3
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009a      	lsls	r2, r3, #2
 8003b70:	441a      	add	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb0 <UART_SetConfig+0x118>)
 8003b7e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b82:	095b      	lsrs	r3, r3, #5
 8003b84:	2064      	movs	r0, #100	@ 0x64
 8003b86:	fb00 f303 	mul.w	r3, r0, r3
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	3332      	adds	r3, #50	@ 0x32
 8003b90:	4a07      	ldr	r2, [pc, #28]	@ (8003bb0 <UART_SetConfig+0x118>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	f003 020f 	and.w	r2, r3, #15
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	440a      	add	r2, r1
 8003ba2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ba4:	bf00      	nop
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40013800 	.word	0x40013800
 8003bb0:	51eb851f 	.word	0x51eb851f

08003bb4 <std>:
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	b510      	push	{r4, lr}
 8003bb8:	4604      	mov	r4, r0
 8003bba:	e9c0 3300 	strd	r3, r3, [r0]
 8003bbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bc2:	6083      	str	r3, [r0, #8]
 8003bc4:	8181      	strh	r1, [r0, #12]
 8003bc6:	6643      	str	r3, [r0, #100]	@ 0x64
 8003bc8:	81c2      	strh	r2, [r0, #14]
 8003bca:	6183      	str	r3, [r0, #24]
 8003bcc:	4619      	mov	r1, r3
 8003bce:	2208      	movs	r2, #8
 8003bd0:	305c      	adds	r0, #92	@ 0x5c
 8003bd2:	f000 f906 	bl	8003de2 <memset>
 8003bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c0c <std+0x58>)
 8003bd8:	6224      	str	r4, [r4, #32]
 8003bda:	6263      	str	r3, [r4, #36]	@ 0x24
 8003bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c10 <std+0x5c>)
 8003bde:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003be0:	4b0c      	ldr	r3, [pc, #48]	@ (8003c14 <std+0x60>)
 8003be2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003be4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c18 <std+0x64>)
 8003be6:	6323      	str	r3, [r4, #48]	@ 0x30
 8003be8:	4b0c      	ldr	r3, [pc, #48]	@ (8003c1c <std+0x68>)
 8003bea:	429c      	cmp	r4, r3
 8003bec:	d006      	beq.n	8003bfc <std+0x48>
 8003bee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003bf2:	4294      	cmp	r4, r2
 8003bf4:	d002      	beq.n	8003bfc <std+0x48>
 8003bf6:	33d0      	adds	r3, #208	@ 0xd0
 8003bf8:	429c      	cmp	r4, r3
 8003bfa:	d105      	bne.n	8003c08 <std+0x54>
 8003bfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c04:	f000 b966 	b.w	8003ed4 <__retarget_lock_init_recursive>
 8003c08:	bd10      	pop	{r4, pc}
 8003c0a:	bf00      	nop
 8003c0c:	08003d5d 	.word	0x08003d5d
 8003c10:	08003d7f 	.word	0x08003d7f
 8003c14:	08003db7 	.word	0x08003db7
 8003c18:	08003ddb 	.word	0x08003ddb
 8003c1c:	20000154 	.word	0x20000154

08003c20 <stdio_exit_handler>:
 8003c20:	4a02      	ldr	r2, [pc, #8]	@ (8003c2c <stdio_exit_handler+0xc>)
 8003c22:	4903      	ldr	r1, [pc, #12]	@ (8003c30 <stdio_exit_handler+0x10>)
 8003c24:	4803      	ldr	r0, [pc, #12]	@ (8003c34 <stdio_exit_handler+0x14>)
 8003c26:	f000 b869 	b.w	8003cfc <_fwalk_sglue>
 8003c2a:	bf00      	nop
 8003c2c:	2000000c 	.word	0x2000000c
 8003c30:	0800476d 	.word	0x0800476d
 8003c34:	2000001c 	.word	0x2000001c

08003c38 <cleanup_stdio>:
 8003c38:	6841      	ldr	r1, [r0, #4]
 8003c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c6c <cleanup_stdio+0x34>)
 8003c3c:	b510      	push	{r4, lr}
 8003c3e:	4299      	cmp	r1, r3
 8003c40:	4604      	mov	r4, r0
 8003c42:	d001      	beq.n	8003c48 <cleanup_stdio+0x10>
 8003c44:	f000 fd92 	bl	800476c <_fflush_r>
 8003c48:	68a1      	ldr	r1, [r4, #8]
 8003c4a:	4b09      	ldr	r3, [pc, #36]	@ (8003c70 <cleanup_stdio+0x38>)
 8003c4c:	4299      	cmp	r1, r3
 8003c4e:	d002      	beq.n	8003c56 <cleanup_stdio+0x1e>
 8003c50:	4620      	mov	r0, r4
 8003c52:	f000 fd8b 	bl	800476c <_fflush_r>
 8003c56:	68e1      	ldr	r1, [r4, #12]
 8003c58:	4b06      	ldr	r3, [pc, #24]	@ (8003c74 <cleanup_stdio+0x3c>)
 8003c5a:	4299      	cmp	r1, r3
 8003c5c:	d004      	beq.n	8003c68 <cleanup_stdio+0x30>
 8003c5e:	4620      	mov	r0, r4
 8003c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c64:	f000 bd82 	b.w	800476c <_fflush_r>
 8003c68:	bd10      	pop	{r4, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000154 	.word	0x20000154
 8003c70:	200001bc 	.word	0x200001bc
 8003c74:	20000224 	.word	0x20000224

08003c78 <global_stdio_init.part.0>:
 8003c78:	b510      	push	{r4, lr}
 8003c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca8 <global_stdio_init.part.0+0x30>)
 8003c7c:	4c0b      	ldr	r4, [pc, #44]	@ (8003cac <global_stdio_init.part.0+0x34>)
 8003c7e:	4a0c      	ldr	r2, [pc, #48]	@ (8003cb0 <global_stdio_init.part.0+0x38>)
 8003c80:	4620      	mov	r0, r4
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	2104      	movs	r1, #4
 8003c86:	2200      	movs	r2, #0
 8003c88:	f7ff ff94 	bl	8003bb4 <std>
 8003c8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c90:	2201      	movs	r2, #1
 8003c92:	2109      	movs	r1, #9
 8003c94:	f7ff ff8e 	bl	8003bb4 <std>
 8003c98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ca2:	2112      	movs	r1, #18
 8003ca4:	f7ff bf86 	b.w	8003bb4 <std>
 8003ca8:	2000028c 	.word	0x2000028c
 8003cac:	20000154 	.word	0x20000154
 8003cb0:	08003c21 	.word	0x08003c21

08003cb4 <__sfp_lock_acquire>:
 8003cb4:	4801      	ldr	r0, [pc, #4]	@ (8003cbc <__sfp_lock_acquire+0x8>)
 8003cb6:	f000 b90e 	b.w	8003ed6 <__retarget_lock_acquire_recursive>
 8003cba:	bf00      	nop
 8003cbc:	20000295 	.word	0x20000295

08003cc0 <__sfp_lock_release>:
 8003cc0:	4801      	ldr	r0, [pc, #4]	@ (8003cc8 <__sfp_lock_release+0x8>)
 8003cc2:	f000 b909 	b.w	8003ed8 <__retarget_lock_release_recursive>
 8003cc6:	bf00      	nop
 8003cc8:	20000295 	.word	0x20000295

08003ccc <__sinit>:
 8003ccc:	b510      	push	{r4, lr}
 8003cce:	4604      	mov	r4, r0
 8003cd0:	f7ff fff0 	bl	8003cb4 <__sfp_lock_acquire>
 8003cd4:	6a23      	ldr	r3, [r4, #32]
 8003cd6:	b11b      	cbz	r3, 8003ce0 <__sinit+0x14>
 8003cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cdc:	f7ff bff0 	b.w	8003cc0 <__sfp_lock_release>
 8003ce0:	4b04      	ldr	r3, [pc, #16]	@ (8003cf4 <__sinit+0x28>)
 8003ce2:	6223      	str	r3, [r4, #32]
 8003ce4:	4b04      	ldr	r3, [pc, #16]	@ (8003cf8 <__sinit+0x2c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1f5      	bne.n	8003cd8 <__sinit+0xc>
 8003cec:	f7ff ffc4 	bl	8003c78 <global_stdio_init.part.0>
 8003cf0:	e7f2      	b.n	8003cd8 <__sinit+0xc>
 8003cf2:	bf00      	nop
 8003cf4:	08003c39 	.word	0x08003c39
 8003cf8:	2000028c 	.word	0x2000028c

08003cfc <_fwalk_sglue>:
 8003cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d00:	4607      	mov	r7, r0
 8003d02:	4688      	mov	r8, r1
 8003d04:	4614      	mov	r4, r2
 8003d06:	2600      	movs	r6, #0
 8003d08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d0c:	f1b9 0901 	subs.w	r9, r9, #1
 8003d10:	d505      	bpl.n	8003d1e <_fwalk_sglue+0x22>
 8003d12:	6824      	ldr	r4, [r4, #0]
 8003d14:	2c00      	cmp	r4, #0
 8003d16:	d1f7      	bne.n	8003d08 <_fwalk_sglue+0xc>
 8003d18:	4630      	mov	r0, r6
 8003d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d1e:	89ab      	ldrh	r3, [r5, #12]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d907      	bls.n	8003d34 <_fwalk_sglue+0x38>
 8003d24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	d003      	beq.n	8003d34 <_fwalk_sglue+0x38>
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	4638      	mov	r0, r7
 8003d30:	47c0      	blx	r8
 8003d32:	4306      	orrs	r6, r0
 8003d34:	3568      	adds	r5, #104	@ 0x68
 8003d36:	e7e9      	b.n	8003d0c <_fwalk_sglue+0x10>

08003d38 <iprintf>:
 8003d38:	b40f      	push	{r0, r1, r2, r3}
 8003d3a:	b507      	push	{r0, r1, r2, lr}
 8003d3c:	4906      	ldr	r1, [pc, #24]	@ (8003d58 <iprintf+0x20>)
 8003d3e:	ab04      	add	r3, sp, #16
 8003d40:	6808      	ldr	r0, [r1, #0]
 8003d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d46:	6881      	ldr	r1, [r0, #8]
 8003d48:	9301      	str	r3, [sp, #4]
 8003d4a:	f000 f9e5 	bl	8004118 <_vfiprintf_r>
 8003d4e:	b003      	add	sp, #12
 8003d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d54:	b004      	add	sp, #16
 8003d56:	4770      	bx	lr
 8003d58:	20000018 	.word	0x20000018

08003d5c <__sread>:
 8003d5c:	b510      	push	{r4, lr}
 8003d5e:	460c      	mov	r4, r1
 8003d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d64:	f000 f868 	bl	8003e38 <_read_r>
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	bfab      	itete	ge
 8003d6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003d6e:	89a3      	ldrhlt	r3, [r4, #12]
 8003d70:	181b      	addge	r3, r3, r0
 8003d72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003d76:	bfac      	ite	ge
 8003d78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003d7a:	81a3      	strhlt	r3, [r4, #12]
 8003d7c:	bd10      	pop	{r4, pc}

08003d7e <__swrite>:
 8003d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d82:	461f      	mov	r7, r3
 8003d84:	898b      	ldrh	r3, [r1, #12]
 8003d86:	4605      	mov	r5, r0
 8003d88:	05db      	lsls	r3, r3, #23
 8003d8a:	460c      	mov	r4, r1
 8003d8c:	4616      	mov	r6, r2
 8003d8e:	d505      	bpl.n	8003d9c <__swrite+0x1e>
 8003d90:	2302      	movs	r3, #2
 8003d92:	2200      	movs	r2, #0
 8003d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d98:	f000 f83c 	bl	8003e14 <_lseek_r>
 8003d9c:	89a3      	ldrh	r3, [r4, #12]
 8003d9e:	4632      	mov	r2, r6
 8003da0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003da4:	81a3      	strh	r3, [r4, #12]
 8003da6:	4628      	mov	r0, r5
 8003da8:	463b      	mov	r3, r7
 8003daa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003db2:	f000 b853 	b.w	8003e5c <_write_r>

08003db6 <__sseek>:
 8003db6:	b510      	push	{r4, lr}
 8003db8:	460c      	mov	r4, r1
 8003dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dbe:	f000 f829 	bl	8003e14 <_lseek_r>
 8003dc2:	1c43      	adds	r3, r0, #1
 8003dc4:	89a3      	ldrh	r3, [r4, #12]
 8003dc6:	bf15      	itete	ne
 8003dc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003dca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003dce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003dd2:	81a3      	strheq	r3, [r4, #12]
 8003dd4:	bf18      	it	ne
 8003dd6:	81a3      	strhne	r3, [r4, #12]
 8003dd8:	bd10      	pop	{r4, pc}

08003dda <__sclose>:
 8003dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dde:	f000 b809 	b.w	8003df4 <_close_r>

08003de2 <memset>:
 8003de2:	4603      	mov	r3, r0
 8003de4:	4402      	add	r2, r0
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d100      	bne.n	8003dec <memset+0xa>
 8003dea:	4770      	bx	lr
 8003dec:	f803 1b01 	strb.w	r1, [r3], #1
 8003df0:	e7f9      	b.n	8003de6 <memset+0x4>
	...

08003df4 <_close_r>:
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	2300      	movs	r3, #0
 8003df8:	4d05      	ldr	r5, [pc, #20]	@ (8003e10 <_close_r+0x1c>)
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	602b      	str	r3, [r5, #0]
 8003e00:	f7fc fc09 	bl	8000616 <_close>
 8003e04:	1c43      	adds	r3, r0, #1
 8003e06:	d102      	bne.n	8003e0e <_close_r+0x1a>
 8003e08:	682b      	ldr	r3, [r5, #0]
 8003e0a:	b103      	cbz	r3, 8003e0e <_close_r+0x1a>
 8003e0c:	6023      	str	r3, [r4, #0]
 8003e0e:	bd38      	pop	{r3, r4, r5, pc}
 8003e10:	20000290 	.word	0x20000290

08003e14 <_lseek_r>:
 8003e14:	b538      	push	{r3, r4, r5, lr}
 8003e16:	4604      	mov	r4, r0
 8003e18:	4608      	mov	r0, r1
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	4d05      	ldr	r5, [pc, #20]	@ (8003e34 <_lseek_r+0x20>)
 8003e20:	602a      	str	r2, [r5, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	f7fc fc1b 	bl	800065e <_lseek>
 8003e28:	1c43      	adds	r3, r0, #1
 8003e2a:	d102      	bne.n	8003e32 <_lseek_r+0x1e>
 8003e2c:	682b      	ldr	r3, [r5, #0]
 8003e2e:	b103      	cbz	r3, 8003e32 <_lseek_r+0x1e>
 8003e30:	6023      	str	r3, [r4, #0]
 8003e32:	bd38      	pop	{r3, r4, r5, pc}
 8003e34:	20000290 	.word	0x20000290

08003e38 <_read_r>:
 8003e38:	b538      	push	{r3, r4, r5, lr}
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	4608      	mov	r0, r1
 8003e3e:	4611      	mov	r1, r2
 8003e40:	2200      	movs	r2, #0
 8003e42:	4d05      	ldr	r5, [pc, #20]	@ (8003e58 <_read_r+0x20>)
 8003e44:	602a      	str	r2, [r5, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	f7fc fbac 	bl	80005a4 <_read>
 8003e4c:	1c43      	adds	r3, r0, #1
 8003e4e:	d102      	bne.n	8003e56 <_read_r+0x1e>
 8003e50:	682b      	ldr	r3, [r5, #0]
 8003e52:	b103      	cbz	r3, 8003e56 <_read_r+0x1e>
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	bd38      	pop	{r3, r4, r5, pc}
 8003e58:	20000290 	.word	0x20000290

08003e5c <_write_r>:
 8003e5c:	b538      	push	{r3, r4, r5, lr}
 8003e5e:	4604      	mov	r4, r0
 8003e60:	4608      	mov	r0, r1
 8003e62:	4611      	mov	r1, r2
 8003e64:	2200      	movs	r2, #0
 8003e66:	4d05      	ldr	r5, [pc, #20]	@ (8003e7c <_write_r+0x20>)
 8003e68:	602a      	str	r2, [r5, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f7fc fbb7 	bl	80005de <_write>
 8003e70:	1c43      	adds	r3, r0, #1
 8003e72:	d102      	bne.n	8003e7a <_write_r+0x1e>
 8003e74:	682b      	ldr	r3, [r5, #0]
 8003e76:	b103      	cbz	r3, 8003e7a <_write_r+0x1e>
 8003e78:	6023      	str	r3, [r4, #0]
 8003e7a:	bd38      	pop	{r3, r4, r5, pc}
 8003e7c:	20000290 	.word	0x20000290

08003e80 <__errno>:
 8003e80:	4b01      	ldr	r3, [pc, #4]	@ (8003e88 <__errno+0x8>)
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	20000018 	.word	0x20000018

08003e8c <__libc_init_array>:
 8003e8c:	b570      	push	{r4, r5, r6, lr}
 8003e8e:	2600      	movs	r6, #0
 8003e90:	4d0c      	ldr	r5, [pc, #48]	@ (8003ec4 <__libc_init_array+0x38>)
 8003e92:	4c0d      	ldr	r4, [pc, #52]	@ (8003ec8 <__libc_init_array+0x3c>)
 8003e94:	1b64      	subs	r4, r4, r5
 8003e96:	10a4      	asrs	r4, r4, #2
 8003e98:	42a6      	cmp	r6, r4
 8003e9a:	d109      	bne.n	8003eb0 <__libc_init_array+0x24>
 8003e9c:	f000 fdc4 	bl	8004a28 <_init>
 8003ea0:	2600      	movs	r6, #0
 8003ea2:	4d0a      	ldr	r5, [pc, #40]	@ (8003ecc <__libc_init_array+0x40>)
 8003ea4:	4c0a      	ldr	r4, [pc, #40]	@ (8003ed0 <__libc_init_array+0x44>)
 8003ea6:	1b64      	subs	r4, r4, r5
 8003ea8:	10a4      	asrs	r4, r4, #2
 8003eaa:	42a6      	cmp	r6, r4
 8003eac:	d105      	bne.n	8003eba <__libc_init_array+0x2e>
 8003eae:	bd70      	pop	{r4, r5, r6, pc}
 8003eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb4:	4798      	blx	r3
 8003eb6:	3601      	adds	r6, #1
 8003eb8:	e7ee      	b.n	8003e98 <__libc_init_array+0xc>
 8003eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ebe:	4798      	blx	r3
 8003ec0:	3601      	adds	r6, #1
 8003ec2:	e7f2      	b.n	8003eaa <__libc_init_array+0x1e>
 8003ec4:	08004ab4 	.word	0x08004ab4
 8003ec8:	08004ab4 	.word	0x08004ab4
 8003ecc:	08004ab4 	.word	0x08004ab4
 8003ed0:	08004ab8 	.word	0x08004ab8

08003ed4 <__retarget_lock_init_recursive>:
 8003ed4:	4770      	bx	lr

08003ed6 <__retarget_lock_acquire_recursive>:
 8003ed6:	4770      	bx	lr

08003ed8 <__retarget_lock_release_recursive>:
 8003ed8:	4770      	bx	lr
	...

08003edc <_free_r>:
 8003edc:	b538      	push	{r3, r4, r5, lr}
 8003ede:	4605      	mov	r5, r0
 8003ee0:	2900      	cmp	r1, #0
 8003ee2:	d040      	beq.n	8003f66 <_free_r+0x8a>
 8003ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ee8:	1f0c      	subs	r4, r1, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	bfb8      	it	lt
 8003eee:	18e4      	addlt	r4, r4, r3
 8003ef0:	f000 f8de 	bl	80040b0 <__malloc_lock>
 8003ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8003f68 <_free_r+0x8c>)
 8003ef6:	6813      	ldr	r3, [r2, #0]
 8003ef8:	b933      	cbnz	r3, 8003f08 <_free_r+0x2c>
 8003efa:	6063      	str	r3, [r4, #4]
 8003efc:	6014      	str	r4, [r2, #0]
 8003efe:	4628      	mov	r0, r5
 8003f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f04:	f000 b8da 	b.w	80040bc <__malloc_unlock>
 8003f08:	42a3      	cmp	r3, r4
 8003f0a:	d908      	bls.n	8003f1e <_free_r+0x42>
 8003f0c:	6820      	ldr	r0, [r4, #0]
 8003f0e:	1821      	adds	r1, r4, r0
 8003f10:	428b      	cmp	r3, r1
 8003f12:	bf01      	itttt	eq
 8003f14:	6819      	ldreq	r1, [r3, #0]
 8003f16:	685b      	ldreq	r3, [r3, #4]
 8003f18:	1809      	addeq	r1, r1, r0
 8003f1a:	6021      	streq	r1, [r4, #0]
 8003f1c:	e7ed      	b.n	8003efa <_free_r+0x1e>
 8003f1e:	461a      	mov	r2, r3
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	b10b      	cbz	r3, 8003f28 <_free_r+0x4c>
 8003f24:	42a3      	cmp	r3, r4
 8003f26:	d9fa      	bls.n	8003f1e <_free_r+0x42>
 8003f28:	6811      	ldr	r1, [r2, #0]
 8003f2a:	1850      	adds	r0, r2, r1
 8003f2c:	42a0      	cmp	r0, r4
 8003f2e:	d10b      	bne.n	8003f48 <_free_r+0x6c>
 8003f30:	6820      	ldr	r0, [r4, #0]
 8003f32:	4401      	add	r1, r0
 8003f34:	1850      	adds	r0, r2, r1
 8003f36:	4283      	cmp	r3, r0
 8003f38:	6011      	str	r1, [r2, #0]
 8003f3a:	d1e0      	bne.n	8003efe <_free_r+0x22>
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	4408      	add	r0, r1
 8003f42:	6010      	str	r0, [r2, #0]
 8003f44:	6053      	str	r3, [r2, #4]
 8003f46:	e7da      	b.n	8003efe <_free_r+0x22>
 8003f48:	d902      	bls.n	8003f50 <_free_r+0x74>
 8003f4a:	230c      	movs	r3, #12
 8003f4c:	602b      	str	r3, [r5, #0]
 8003f4e:	e7d6      	b.n	8003efe <_free_r+0x22>
 8003f50:	6820      	ldr	r0, [r4, #0]
 8003f52:	1821      	adds	r1, r4, r0
 8003f54:	428b      	cmp	r3, r1
 8003f56:	bf01      	itttt	eq
 8003f58:	6819      	ldreq	r1, [r3, #0]
 8003f5a:	685b      	ldreq	r3, [r3, #4]
 8003f5c:	1809      	addeq	r1, r1, r0
 8003f5e:	6021      	streq	r1, [r4, #0]
 8003f60:	6063      	str	r3, [r4, #4]
 8003f62:	6054      	str	r4, [r2, #4]
 8003f64:	e7cb      	b.n	8003efe <_free_r+0x22>
 8003f66:	bd38      	pop	{r3, r4, r5, pc}
 8003f68:	2000029c 	.word	0x2000029c

08003f6c <sbrk_aligned>:
 8003f6c:	b570      	push	{r4, r5, r6, lr}
 8003f6e:	4e0f      	ldr	r6, [pc, #60]	@ (8003fac <sbrk_aligned+0x40>)
 8003f70:	460c      	mov	r4, r1
 8003f72:	6831      	ldr	r1, [r6, #0]
 8003f74:	4605      	mov	r5, r0
 8003f76:	b911      	cbnz	r1, 8003f7e <sbrk_aligned+0x12>
 8003f78:	f000 fcb4 	bl	80048e4 <_sbrk_r>
 8003f7c:	6030      	str	r0, [r6, #0]
 8003f7e:	4621      	mov	r1, r4
 8003f80:	4628      	mov	r0, r5
 8003f82:	f000 fcaf 	bl	80048e4 <_sbrk_r>
 8003f86:	1c43      	adds	r3, r0, #1
 8003f88:	d103      	bne.n	8003f92 <sbrk_aligned+0x26>
 8003f8a:	f04f 34ff 	mov.w	r4, #4294967295
 8003f8e:	4620      	mov	r0, r4
 8003f90:	bd70      	pop	{r4, r5, r6, pc}
 8003f92:	1cc4      	adds	r4, r0, #3
 8003f94:	f024 0403 	bic.w	r4, r4, #3
 8003f98:	42a0      	cmp	r0, r4
 8003f9a:	d0f8      	beq.n	8003f8e <sbrk_aligned+0x22>
 8003f9c:	1a21      	subs	r1, r4, r0
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	f000 fca0 	bl	80048e4 <_sbrk_r>
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	d1f2      	bne.n	8003f8e <sbrk_aligned+0x22>
 8003fa8:	e7ef      	b.n	8003f8a <sbrk_aligned+0x1e>
 8003faa:	bf00      	nop
 8003fac:	20000298 	.word	0x20000298

08003fb0 <_malloc_r>:
 8003fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fb4:	1ccd      	adds	r5, r1, #3
 8003fb6:	f025 0503 	bic.w	r5, r5, #3
 8003fba:	3508      	adds	r5, #8
 8003fbc:	2d0c      	cmp	r5, #12
 8003fbe:	bf38      	it	cc
 8003fc0:	250c      	movcc	r5, #12
 8003fc2:	2d00      	cmp	r5, #0
 8003fc4:	4606      	mov	r6, r0
 8003fc6:	db01      	blt.n	8003fcc <_malloc_r+0x1c>
 8003fc8:	42a9      	cmp	r1, r5
 8003fca:	d904      	bls.n	8003fd6 <_malloc_r+0x26>
 8003fcc:	230c      	movs	r3, #12
 8003fce:	6033      	str	r3, [r6, #0]
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80040ac <_malloc_r+0xfc>
 8003fda:	f000 f869 	bl	80040b0 <__malloc_lock>
 8003fde:	f8d8 3000 	ldr.w	r3, [r8]
 8003fe2:	461c      	mov	r4, r3
 8003fe4:	bb44      	cbnz	r4, 8004038 <_malloc_r+0x88>
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	4630      	mov	r0, r6
 8003fea:	f7ff ffbf 	bl	8003f6c <sbrk_aligned>
 8003fee:	1c43      	adds	r3, r0, #1
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	d158      	bne.n	80040a6 <_malloc_r+0xf6>
 8003ff4:	f8d8 4000 	ldr.w	r4, [r8]
 8003ff8:	4627      	mov	r7, r4
 8003ffa:	2f00      	cmp	r7, #0
 8003ffc:	d143      	bne.n	8004086 <_malloc_r+0xd6>
 8003ffe:	2c00      	cmp	r4, #0
 8004000:	d04b      	beq.n	800409a <_malloc_r+0xea>
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	4639      	mov	r1, r7
 8004006:	4630      	mov	r0, r6
 8004008:	eb04 0903 	add.w	r9, r4, r3
 800400c:	f000 fc6a 	bl	80048e4 <_sbrk_r>
 8004010:	4581      	cmp	r9, r0
 8004012:	d142      	bne.n	800409a <_malloc_r+0xea>
 8004014:	6821      	ldr	r1, [r4, #0]
 8004016:	4630      	mov	r0, r6
 8004018:	1a6d      	subs	r5, r5, r1
 800401a:	4629      	mov	r1, r5
 800401c:	f7ff ffa6 	bl	8003f6c <sbrk_aligned>
 8004020:	3001      	adds	r0, #1
 8004022:	d03a      	beq.n	800409a <_malloc_r+0xea>
 8004024:	6823      	ldr	r3, [r4, #0]
 8004026:	442b      	add	r3, r5
 8004028:	6023      	str	r3, [r4, #0]
 800402a:	f8d8 3000 	ldr.w	r3, [r8]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	bb62      	cbnz	r2, 800408c <_malloc_r+0xdc>
 8004032:	f8c8 7000 	str.w	r7, [r8]
 8004036:	e00f      	b.n	8004058 <_malloc_r+0xa8>
 8004038:	6822      	ldr	r2, [r4, #0]
 800403a:	1b52      	subs	r2, r2, r5
 800403c:	d420      	bmi.n	8004080 <_malloc_r+0xd0>
 800403e:	2a0b      	cmp	r2, #11
 8004040:	d917      	bls.n	8004072 <_malloc_r+0xc2>
 8004042:	1961      	adds	r1, r4, r5
 8004044:	42a3      	cmp	r3, r4
 8004046:	6025      	str	r5, [r4, #0]
 8004048:	bf18      	it	ne
 800404a:	6059      	strne	r1, [r3, #4]
 800404c:	6863      	ldr	r3, [r4, #4]
 800404e:	bf08      	it	eq
 8004050:	f8c8 1000 	streq.w	r1, [r8]
 8004054:	5162      	str	r2, [r4, r5]
 8004056:	604b      	str	r3, [r1, #4]
 8004058:	4630      	mov	r0, r6
 800405a:	f000 f82f 	bl	80040bc <__malloc_unlock>
 800405e:	f104 000b 	add.w	r0, r4, #11
 8004062:	1d23      	adds	r3, r4, #4
 8004064:	f020 0007 	bic.w	r0, r0, #7
 8004068:	1ac2      	subs	r2, r0, r3
 800406a:	bf1c      	itt	ne
 800406c:	1a1b      	subne	r3, r3, r0
 800406e:	50a3      	strne	r3, [r4, r2]
 8004070:	e7af      	b.n	8003fd2 <_malloc_r+0x22>
 8004072:	6862      	ldr	r2, [r4, #4]
 8004074:	42a3      	cmp	r3, r4
 8004076:	bf0c      	ite	eq
 8004078:	f8c8 2000 	streq.w	r2, [r8]
 800407c:	605a      	strne	r2, [r3, #4]
 800407e:	e7eb      	b.n	8004058 <_malloc_r+0xa8>
 8004080:	4623      	mov	r3, r4
 8004082:	6864      	ldr	r4, [r4, #4]
 8004084:	e7ae      	b.n	8003fe4 <_malloc_r+0x34>
 8004086:	463c      	mov	r4, r7
 8004088:	687f      	ldr	r7, [r7, #4]
 800408a:	e7b6      	b.n	8003ffa <_malloc_r+0x4a>
 800408c:	461a      	mov	r2, r3
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	42a3      	cmp	r3, r4
 8004092:	d1fb      	bne.n	800408c <_malloc_r+0xdc>
 8004094:	2300      	movs	r3, #0
 8004096:	6053      	str	r3, [r2, #4]
 8004098:	e7de      	b.n	8004058 <_malloc_r+0xa8>
 800409a:	230c      	movs	r3, #12
 800409c:	4630      	mov	r0, r6
 800409e:	6033      	str	r3, [r6, #0]
 80040a0:	f000 f80c 	bl	80040bc <__malloc_unlock>
 80040a4:	e794      	b.n	8003fd0 <_malloc_r+0x20>
 80040a6:	6005      	str	r5, [r0, #0]
 80040a8:	e7d6      	b.n	8004058 <_malloc_r+0xa8>
 80040aa:	bf00      	nop
 80040ac:	2000029c 	.word	0x2000029c

080040b0 <__malloc_lock>:
 80040b0:	4801      	ldr	r0, [pc, #4]	@ (80040b8 <__malloc_lock+0x8>)
 80040b2:	f7ff bf10 	b.w	8003ed6 <__retarget_lock_acquire_recursive>
 80040b6:	bf00      	nop
 80040b8:	20000294 	.word	0x20000294

080040bc <__malloc_unlock>:
 80040bc:	4801      	ldr	r0, [pc, #4]	@ (80040c4 <__malloc_unlock+0x8>)
 80040be:	f7ff bf0b 	b.w	8003ed8 <__retarget_lock_release_recursive>
 80040c2:	bf00      	nop
 80040c4:	20000294 	.word	0x20000294

080040c8 <__sfputc_r>:
 80040c8:	6893      	ldr	r3, [r2, #8]
 80040ca:	b410      	push	{r4}
 80040cc:	3b01      	subs	r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	6093      	str	r3, [r2, #8]
 80040d2:	da07      	bge.n	80040e4 <__sfputc_r+0x1c>
 80040d4:	6994      	ldr	r4, [r2, #24]
 80040d6:	42a3      	cmp	r3, r4
 80040d8:	db01      	blt.n	80040de <__sfputc_r+0x16>
 80040da:	290a      	cmp	r1, #10
 80040dc:	d102      	bne.n	80040e4 <__sfputc_r+0x1c>
 80040de:	bc10      	pop	{r4}
 80040e0:	f000 bb6c 	b.w	80047bc <__swbuf_r>
 80040e4:	6813      	ldr	r3, [r2, #0]
 80040e6:	1c58      	adds	r0, r3, #1
 80040e8:	6010      	str	r0, [r2, #0]
 80040ea:	7019      	strb	r1, [r3, #0]
 80040ec:	4608      	mov	r0, r1
 80040ee:	bc10      	pop	{r4}
 80040f0:	4770      	bx	lr

080040f2 <__sfputs_r>:
 80040f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f4:	4606      	mov	r6, r0
 80040f6:	460f      	mov	r7, r1
 80040f8:	4614      	mov	r4, r2
 80040fa:	18d5      	adds	r5, r2, r3
 80040fc:	42ac      	cmp	r4, r5
 80040fe:	d101      	bne.n	8004104 <__sfputs_r+0x12>
 8004100:	2000      	movs	r0, #0
 8004102:	e007      	b.n	8004114 <__sfputs_r+0x22>
 8004104:	463a      	mov	r2, r7
 8004106:	4630      	mov	r0, r6
 8004108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800410c:	f7ff ffdc 	bl	80040c8 <__sfputc_r>
 8004110:	1c43      	adds	r3, r0, #1
 8004112:	d1f3      	bne.n	80040fc <__sfputs_r+0xa>
 8004114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004118 <_vfiprintf_r>:
 8004118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800411c:	460d      	mov	r5, r1
 800411e:	4614      	mov	r4, r2
 8004120:	4698      	mov	r8, r3
 8004122:	4606      	mov	r6, r0
 8004124:	b09d      	sub	sp, #116	@ 0x74
 8004126:	b118      	cbz	r0, 8004130 <_vfiprintf_r+0x18>
 8004128:	6a03      	ldr	r3, [r0, #32]
 800412a:	b90b      	cbnz	r3, 8004130 <_vfiprintf_r+0x18>
 800412c:	f7ff fdce 	bl	8003ccc <__sinit>
 8004130:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004132:	07d9      	lsls	r1, r3, #31
 8004134:	d405      	bmi.n	8004142 <_vfiprintf_r+0x2a>
 8004136:	89ab      	ldrh	r3, [r5, #12]
 8004138:	059a      	lsls	r2, r3, #22
 800413a:	d402      	bmi.n	8004142 <_vfiprintf_r+0x2a>
 800413c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800413e:	f7ff feca 	bl	8003ed6 <__retarget_lock_acquire_recursive>
 8004142:	89ab      	ldrh	r3, [r5, #12]
 8004144:	071b      	lsls	r3, r3, #28
 8004146:	d501      	bpl.n	800414c <_vfiprintf_r+0x34>
 8004148:	692b      	ldr	r3, [r5, #16]
 800414a:	b99b      	cbnz	r3, 8004174 <_vfiprintf_r+0x5c>
 800414c:	4629      	mov	r1, r5
 800414e:	4630      	mov	r0, r6
 8004150:	f000 fb72 	bl	8004838 <__swsetup_r>
 8004154:	b170      	cbz	r0, 8004174 <_vfiprintf_r+0x5c>
 8004156:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004158:	07dc      	lsls	r4, r3, #31
 800415a:	d504      	bpl.n	8004166 <_vfiprintf_r+0x4e>
 800415c:	f04f 30ff 	mov.w	r0, #4294967295
 8004160:	b01d      	add	sp, #116	@ 0x74
 8004162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004166:	89ab      	ldrh	r3, [r5, #12]
 8004168:	0598      	lsls	r0, r3, #22
 800416a:	d4f7      	bmi.n	800415c <_vfiprintf_r+0x44>
 800416c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800416e:	f7ff feb3 	bl	8003ed8 <__retarget_lock_release_recursive>
 8004172:	e7f3      	b.n	800415c <_vfiprintf_r+0x44>
 8004174:	2300      	movs	r3, #0
 8004176:	9309      	str	r3, [sp, #36]	@ 0x24
 8004178:	2320      	movs	r3, #32
 800417a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800417e:	2330      	movs	r3, #48	@ 0x30
 8004180:	f04f 0901 	mov.w	r9, #1
 8004184:	f8cd 800c 	str.w	r8, [sp, #12]
 8004188:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004334 <_vfiprintf_r+0x21c>
 800418c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004190:	4623      	mov	r3, r4
 8004192:	469a      	mov	sl, r3
 8004194:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004198:	b10a      	cbz	r2, 800419e <_vfiprintf_r+0x86>
 800419a:	2a25      	cmp	r2, #37	@ 0x25
 800419c:	d1f9      	bne.n	8004192 <_vfiprintf_r+0x7a>
 800419e:	ebba 0b04 	subs.w	fp, sl, r4
 80041a2:	d00b      	beq.n	80041bc <_vfiprintf_r+0xa4>
 80041a4:	465b      	mov	r3, fp
 80041a6:	4622      	mov	r2, r4
 80041a8:	4629      	mov	r1, r5
 80041aa:	4630      	mov	r0, r6
 80041ac:	f7ff ffa1 	bl	80040f2 <__sfputs_r>
 80041b0:	3001      	adds	r0, #1
 80041b2:	f000 80a7 	beq.w	8004304 <_vfiprintf_r+0x1ec>
 80041b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041b8:	445a      	add	r2, fp
 80041ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80041bc:	f89a 3000 	ldrb.w	r3, [sl]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 809f 	beq.w	8004304 <_vfiprintf_r+0x1ec>
 80041c6:	2300      	movs	r3, #0
 80041c8:	f04f 32ff 	mov.w	r2, #4294967295
 80041cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041d0:	f10a 0a01 	add.w	sl, sl, #1
 80041d4:	9304      	str	r3, [sp, #16]
 80041d6:	9307      	str	r3, [sp, #28]
 80041d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80041de:	4654      	mov	r4, sl
 80041e0:	2205      	movs	r2, #5
 80041e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041e6:	4853      	ldr	r0, [pc, #332]	@ (8004334 <_vfiprintf_r+0x21c>)
 80041e8:	f000 fb8c 	bl	8004904 <memchr>
 80041ec:	9a04      	ldr	r2, [sp, #16]
 80041ee:	b9d8      	cbnz	r0, 8004228 <_vfiprintf_r+0x110>
 80041f0:	06d1      	lsls	r1, r2, #27
 80041f2:	bf44      	itt	mi
 80041f4:	2320      	movmi	r3, #32
 80041f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041fa:	0713      	lsls	r3, r2, #28
 80041fc:	bf44      	itt	mi
 80041fe:	232b      	movmi	r3, #43	@ 0x2b
 8004200:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004204:	f89a 3000 	ldrb.w	r3, [sl]
 8004208:	2b2a      	cmp	r3, #42	@ 0x2a
 800420a:	d015      	beq.n	8004238 <_vfiprintf_r+0x120>
 800420c:	4654      	mov	r4, sl
 800420e:	2000      	movs	r0, #0
 8004210:	f04f 0c0a 	mov.w	ip, #10
 8004214:	9a07      	ldr	r2, [sp, #28]
 8004216:	4621      	mov	r1, r4
 8004218:	f811 3b01 	ldrb.w	r3, [r1], #1
 800421c:	3b30      	subs	r3, #48	@ 0x30
 800421e:	2b09      	cmp	r3, #9
 8004220:	d94b      	bls.n	80042ba <_vfiprintf_r+0x1a2>
 8004222:	b1b0      	cbz	r0, 8004252 <_vfiprintf_r+0x13a>
 8004224:	9207      	str	r2, [sp, #28]
 8004226:	e014      	b.n	8004252 <_vfiprintf_r+0x13a>
 8004228:	eba0 0308 	sub.w	r3, r0, r8
 800422c:	fa09 f303 	lsl.w	r3, r9, r3
 8004230:	4313      	orrs	r3, r2
 8004232:	46a2      	mov	sl, r4
 8004234:	9304      	str	r3, [sp, #16]
 8004236:	e7d2      	b.n	80041de <_vfiprintf_r+0xc6>
 8004238:	9b03      	ldr	r3, [sp, #12]
 800423a:	1d19      	adds	r1, r3, #4
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	9103      	str	r1, [sp, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	bfbb      	ittet	lt
 8004244:	425b      	neglt	r3, r3
 8004246:	f042 0202 	orrlt.w	r2, r2, #2
 800424a:	9307      	strge	r3, [sp, #28]
 800424c:	9307      	strlt	r3, [sp, #28]
 800424e:	bfb8      	it	lt
 8004250:	9204      	strlt	r2, [sp, #16]
 8004252:	7823      	ldrb	r3, [r4, #0]
 8004254:	2b2e      	cmp	r3, #46	@ 0x2e
 8004256:	d10a      	bne.n	800426e <_vfiprintf_r+0x156>
 8004258:	7863      	ldrb	r3, [r4, #1]
 800425a:	2b2a      	cmp	r3, #42	@ 0x2a
 800425c:	d132      	bne.n	80042c4 <_vfiprintf_r+0x1ac>
 800425e:	9b03      	ldr	r3, [sp, #12]
 8004260:	3402      	adds	r4, #2
 8004262:	1d1a      	adds	r2, r3, #4
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	9203      	str	r2, [sp, #12]
 8004268:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800426c:	9305      	str	r3, [sp, #20]
 800426e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004338 <_vfiprintf_r+0x220>
 8004272:	2203      	movs	r2, #3
 8004274:	4650      	mov	r0, sl
 8004276:	7821      	ldrb	r1, [r4, #0]
 8004278:	f000 fb44 	bl	8004904 <memchr>
 800427c:	b138      	cbz	r0, 800428e <_vfiprintf_r+0x176>
 800427e:	2240      	movs	r2, #64	@ 0x40
 8004280:	9b04      	ldr	r3, [sp, #16]
 8004282:	eba0 000a 	sub.w	r0, r0, sl
 8004286:	4082      	lsls	r2, r0
 8004288:	4313      	orrs	r3, r2
 800428a:	3401      	adds	r4, #1
 800428c:	9304      	str	r3, [sp, #16]
 800428e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004292:	2206      	movs	r2, #6
 8004294:	4829      	ldr	r0, [pc, #164]	@ (800433c <_vfiprintf_r+0x224>)
 8004296:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800429a:	f000 fb33 	bl	8004904 <memchr>
 800429e:	2800      	cmp	r0, #0
 80042a0:	d03f      	beq.n	8004322 <_vfiprintf_r+0x20a>
 80042a2:	4b27      	ldr	r3, [pc, #156]	@ (8004340 <_vfiprintf_r+0x228>)
 80042a4:	bb1b      	cbnz	r3, 80042ee <_vfiprintf_r+0x1d6>
 80042a6:	9b03      	ldr	r3, [sp, #12]
 80042a8:	3307      	adds	r3, #7
 80042aa:	f023 0307 	bic.w	r3, r3, #7
 80042ae:	3308      	adds	r3, #8
 80042b0:	9303      	str	r3, [sp, #12]
 80042b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042b4:	443b      	add	r3, r7
 80042b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80042b8:	e76a      	b.n	8004190 <_vfiprintf_r+0x78>
 80042ba:	460c      	mov	r4, r1
 80042bc:	2001      	movs	r0, #1
 80042be:	fb0c 3202 	mla	r2, ip, r2, r3
 80042c2:	e7a8      	b.n	8004216 <_vfiprintf_r+0xfe>
 80042c4:	2300      	movs	r3, #0
 80042c6:	f04f 0c0a 	mov.w	ip, #10
 80042ca:	4619      	mov	r1, r3
 80042cc:	3401      	adds	r4, #1
 80042ce:	9305      	str	r3, [sp, #20]
 80042d0:	4620      	mov	r0, r4
 80042d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042d6:	3a30      	subs	r2, #48	@ 0x30
 80042d8:	2a09      	cmp	r2, #9
 80042da:	d903      	bls.n	80042e4 <_vfiprintf_r+0x1cc>
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0c6      	beq.n	800426e <_vfiprintf_r+0x156>
 80042e0:	9105      	str	r1, [sp, #20]
 80042e2:	e7c4      	b.n	800426e <_vfiprintf_r+0x156>
 80042e4:	4604      	mov	r4, r0
 80042e6:	2301      	movs	r3, #1
 80042e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80042ec:	e7f0      	b.n	80042d0 <_vfiprintf_r+0x1b8>
 80042ee:	ab03      	add	r3, sp, #12
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	462a      	mov	r2, r5
 80042f4:	4630      	mov	r0, r6
 80042f6:	4b13      	ldr	r3, [pc, #76]	@ (8004344 <_vfiprintf_r+0x22c>)
 80042f8:	a904      	add	r1, sp, #16
 80042fa:	f3af 8000 	nop.w
 80042fe:	4607      	mov	r7, r0
 8004300:	1c78      	adds	r0, r7, #1
 8004302:	d1d6      	bne.n	80042b2 <_vfiprintf_r+0x19a>
 8004304:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004306:	07d9      	lsls	r1, r3, #31
 8004308:	d405      	bmi.n	8004316 <_vfiprintf_r+0x1fe>
 800430a:	89ab      	ldrh	r3, [r5, #12]
 800430c:	059a      	lsls	r2, r3, #22
 800430e:	d402      	bmi.n	8004316 <_vfiprintf_r+0x1fe>
 8004310:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004312:	f7ff fde1 	bl	8003ed8 <__retarget_lock_release_recursive>
 8004316:	89ab      	ldrh	r3, [r5, #12]
 8004318:	065b      	lsls	r3, r3, #25
 800431a:	f53f af1f 	bmi.w	800415c <_vfiprintf_r+0x44>
 800431e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004320:	e71e      	b.n	8004160 <_vfiprintf_r+0x48>
 8004322:	ab03      	add	r3, sp, #12
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	462a      	mov	r2, r5
 8004328:	4630      	mov	r0, r6
 800432a:	4b06      	ldr	r3, [pc, #24]	@ (8004344 <_vfiprintf_r+0x22c>)
 800432c:	a904      	add	r1, sp, #16
 800432e:	f000 f87d 	bl	800442c <_printf_i>
 8004332:	e7e4      	b.n	80042fe <_vfiprintf_r+0x1e6>
 8004334:	08004a7e 	.word	0x08004a7e
 8004338:	08004a84 	.word	0x08004a84
 800433c:	08004a88 	.word	0x08004a88
 8004340:	00000000 	.word	0x00000000
 8004344:	080040f3 	.word	0x080040f3

08004348 <_printf_common>:
 8004348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800434c:	4616      	mov	r6, r2
 800434e:	4698      	mov	r8, r3
 8004350:	688a      	ldr	r2, [r1, #8]
 8004352:	690b      	ldr	r3, [r1, #16]
 8004354:	4607      	mov	r7, r0
 8004356:	4293      	cmp	r3, r2
 8004358:	bfb8      	it	lt
 800435a:	4613      	movlt	r3, r2
 800435c:	6033      	str	r3, [r6, #0]
 800435e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004362:	460c      	mov	r4, r1
 8004364:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004368:	b10a      	cbz	r2, 800436e <_printf_common+0x26>
 800436a:	3301      	adds	r3, #1
 800436c:	6033      	str	r3, [r6, #0]
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	0699      	lsls	r1, r3, #26
 8004372:	bf42      	ittt	mi
 8004374:	6833      	ldrmi	r3, [r6, #0]
 8004376:	3302      	addmi	r3, #2
 8004378:	6033      	strmi	r3, [r6, #0]
 800437a:	6825      	ldr	r5, [r4, #0]
 800437c:	f015 0506 	ands.w	r5, r5, #6
 8004380:	d106      	bne.n	8004390 <_printf_common+0x48>
 8004382:	f104 0a19 	add.w	sl, r4, #25
 8004386:	68e3      	ldr	r3, [r4, #12]
 8004388:	6832      	ldr	r2, [r6, #0]
 800438a:	1a9b      	subs	r3, r3, r2
 800438c:	42ab      	cmp	r3, r5
 800438e:	dc2b      	bgt.n	80043e8 <_printf_common+0xa0>
 8004390:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004394:	6822      	ldr	r2, [r4, #0]
 8004396:	3b00      	subs	r3, #0
 8004398:	bf18      	it	ne
 800439a:	2301      	movne	r3, #1
 800439c:	0692      	lsls	r2, r2, #26
 800439e:	d430      	bmi.n	8004402 <_printf_common+0xba>
 80043a0:	4641      	mov	r1, r8
 80043a2:	4638      	mov	r0, r7
 80043a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043a8:	47c8      	blx	r9
 80043aa:	3001      	adds	r0, #1
 80043ac:	d023      	beq.n	80043f6 <_printf_common+0xae>
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	6922      	ldr	r2, [r4, #16]
 80043b2:	f003 0306 	and.w	r3, r3, #6
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	bf14      	ite	ne
 80043ba:	2500      	movne	r5, #0
 80043bc:	6833      	ldreq	r3, [r6, #0]
 80043be:	f04f 0600 	mov.w	r6, #0
 80043c2:	bf08      	it	eq
 80043c4:	68e5      	ldreq	r5, [r4, #12]
 80043c6:	f104 041a 	add.w	r4, r4, #26
 80043ca:	bf08      	it	eq
 80043cc:	1aed      	subeq	r5, r5, r3
 80043ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80043d2:	bf08      	it	eq
 80043d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043d8:	4293      	cmp	r3, r2
 80043da:	bfc4      	itt	gt
 80043dc:	1a9b      	subgt	r3, r3, r2
 80043de:	18ed      	addgt	r5, r5, r3
 80043e0:	42b5      	cmp	r5, r6
 80043e2:	d11a      	bne.n	800441a <_printf_common+0xd2>
 80043e4:	2000      	movs	r0, #0
 80043e6:	e008      	b.n	80043fa <_printf_common+0xb2>
 80043e8:	2301      	movs	r3, #1
 80043ea:	4652      	mov	r2, sl
 80043ec:	4641      	mov	r1, r8
 80043ee:	4638      	mov	r0, r7
 80043f0:	47c8      	blx	r9
 80043f2:	3001      	adds	r0, #1
 80043f4:	d103      	bne.n	80043fe <_printf_common+0xb6>
 80043f6:	f04f 30ff 	mov.w	r0, #4294967295
 80043fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fe:	3501      	adds	r5, #1
 8004400:	e7c1      	b.n	8004386 <_printf_common+0x3e>
 8004402:	2030      	movs	r0, #48	@ 0x30
 8004404:	18e1      	adds	r1, r4, r3
 8004406:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004410:	4422      	add	r2, r4
 8004412:	3302      	adds	r3, #2
 8004414:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004418:	e7c2      	b.n	80043a0 <_printf_common+0x58>
 800441a:	2301      	movs	r3, #1
 800441c:	4622      	mov	r2, r4
 800441e:	4641      	mov	r1, r8
 8004420:	4638      	mov	r0, r7
 8004422:	47c8      	blx	r9
 8004424:	3001      	adds	r0, #1
 8004426:	d0e6      	beq.n	80043f6 <_printf_common+0xae>
 8004428:	3601      	adds	r6, #1
 800442a:	e7d9      	b.n	80043e0 <_printf_common+0x98>

0800442c <_printf_i>:
 800442c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004430:	7e0f      	ldrb	r7, [r1, #24]
 8004432:	4691      	mov	r9, r2
 8004434:	2f78      	cmp	r7, #120	@ 0x78
 8004436:	4680      	mov	r8, r0
 8004438:	460c      	mov	r4, r1
 800443a:	469a      	mov	sl, r3
 800443c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800443e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004442:	d807      	bhi.n	8004454 <_printf_i+0x28>
 8004444:	2f62      	cmp	r7, #98	@ 0x62
 8004446:	d80a      	bhi.n	800445e <_printf_i+0x32>
 8004448:	2f00      	cmp	r7, #0
 800444a:	f000 80d3 	beq.w	80045f4 <_printf_i+0x1c8>
 800444e:	2f58      	cmp	r7, #88	@ 0x58
 8004450:	f000 80ba 	beq.w	80045c8 <_printf_i+0x19c>
 8004454:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004458:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800445c:	e03a      	b.n	80044d4 <_printf_i+0xa8>
 800445e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004462:	2b15      	cmp	r3, #21
 8004464:	d8f6      	bhi.n	8004454 <_printf_i+0x28>
 8004466:	a101      	add	r1, pc, #4	@ (adr r1, 800446c <_printf_i+0x40>)
 8004468:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800446c:	080044c5 	.word	0x080044c5
 8004470:	080044d9 	.word	0x080044d9
 8004474:	08004455 	.word	0x08004455
 8004478:	08004455 	.word	0x08004455
 800447c:	08004455 	.word	0x08004455
 8004480:	08004455 	.word	0x08004455
 8004484:	080044d9 	.word	0x080044d9
 8004488:	08004455 	.word	0x08004455
 800448c:	08004455 	.word	0x08004455
 8004490:	08004455 	.word	0x08004455
 8004494:	08004455 	.word	0x08004455
 8004498:	080045db 	.word	0x080045db
 800449c:	08004503 	.word	0x08004503
 80044a0:	08004595 	.word	0x08004595
 80044a4:	08004455 	.word	0x08004455
 80044a8:	08004455 	.word	0x08004455
 80044ac:	080045fd 	.word	0x080045fd
 80044b0:	08004455 	.word	0x08004455
 80044b4:	08004503 	.word	0x08004503
 80044b8:	08004455 	.word	0x08004455
 80044bc:	08004455 	.word	0x08004455
 80044c0:	0800459d 	.word	0x0800459d
 80044c4:	6833      	ldr	r3, [r6, #0]
 80044c6:	1d1a      	adds	r2, r3, #4
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6032      	str	r2, [r6, #0]
 80044cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044d4:	2301      	movs	r3, #1
 80044d6:	e09e      	b.n	8004616 <_printf_i+0x1ea>
 80044d8:	6833      	ldr	r3, [r6, #0]
 80044da:	6820      	ldr	r0, [r4, #0]
 80044dc:	1d19      	adds	r1, r3, #4
 80044de:	6031      	str	r1, [r6, #0]
 80044e0:	0606      	lsls	r6, r0, #24
 80044e2:	d501      	bpl.n	80044e8 <_printf_i+0xbc>
 80044e4:	681d      	ldr	r5, [r3, #0]
 80044e6:	e003      	b.n	80044f0 <_printf_i+0xc4>
 80044e8:	0645      	lsls	r5, r0, #25
 80044ea:	d5fb      	bpl.n	80044e4 <_printf_i+0xb8>
 80044ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044f0:	2d00      	cmp	r5, #0
 80044f2:	da03      	bge.n	80044fc <_printf_i+0xd0>
 80044f4:	232d      	movs	r3, #45	@ 0x2d
 80044f6:	426d      	negs	r5, r5
 80044f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044fc:	230a      	movs	r3, #10
 80044fe:	4859      	ldr	r0, [pc, #356]	@ (8004664 <_printf_i+0x238>)
 8004500:	e011      	b.n	8004526 <_printf_i+0xfa>
 8004502:	6821      	ldr	r1, [r4, #0]
 8004504:	6833      	ldr	r3, [r6, #0]
 8004506:	0608      	lsls	r0, r1, #24
 8004508:	f853 5b04 	ldr.w	r5, [r3], #4
 800450c:	d402      	bmi.n	8004514 <_printf_i+0xe8>
 800450e:	0649      	lsls	r1, r1, #25
 8004510:	bf48      	it	mi
 8004512:	b2ad      	uxthmi	r5, r5
 8004514:	2f6f      	cmp	r7, #111	@ 0x6f
 8004516:	6033      	str	r3, [r6, #0]
 8004518:	bf14      	ite	ne
 800451a:	230a      	movne	r3, #10
 800451c:	2308      	moveq	r3, #8
 800451e:	4851      	ldr	r0, [pc, #324]	@ (8004664 <_printf_i+0x238>)
 8004520:	2100      	movs	r1, #0
 8004522:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004526:	6866      	ldr	r6, [r4, #4]
 8004528:	2e00      	cmp	r6, #0
 800452a:	bfa8      	it	ge
 800452c:	6821      	ldrge	r1, [r4, #0]
 800452e:	60a6      	str	r6, [r4, #8]
 8004530:	bfa4      	itt	ge
 8004532:	f021 0104 	bicge.w	r1, r1, #4
 8004536:	6021      	strge	r1, [r4, #0]
 8004538:	b90d      	cbnz	r5, 800453e <_printf_i+0x112>
 800453a:	2e00      	cmp	r6, #0
 800453c:	d04b      	beq.n	80045d6 <_printf_i+0x1aa>
 800453e:	4616      	mov	r6, r2
 8004540:	fbb5 f1f3 	udiv	r1, r5, r3
 8004544:	fb03 5711 	mls	r7, r3, r1, r5
 8004548:	5dc7      	ldrb	r7, [r0, r7]
 800454a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800454e:	462f      	mov	r7, r5
 8004550:	42bb      	cmp	r3, r7
 8004552:	460d      	mov	r5, r1
 8004554:	d9f4      	bls.n	8004540 <_printf_i+0x114>
 8004556:	2b08      	cmp	r3, #8
 8004558:	d10b      	bne.n	8004572 <_printf_i+0x146>
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	07df      	lsls	r7, r3, #31
 800455e:	d508      	bpl.n	8004572 <_printf_i+0x146>
 8004560:	6923      	ldr	r3, [r4, #16]
 8004562:	6861      	ldr	r1, [r4, #4]
 8004564:	4299      	cmp	r1, r3
 8004566:	bfde      	ittt	le
 8004568:	2330      	movle	r3, #48	@ 0x30
 800456a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800456e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004572:	1b92      	subs	r2, r2, r6
 8004574:	6122      	str	r2, [r4, #16]
 8004576:	464b      	mov	r3, r9
 8004578:	4621      	mov	r1, r4
 800457a:	4640      	mov	r0, r8
 800457c:	f8cd a000 	str.w	sl, [sp]
 8004580:	aa03      	add	r2, sp, #12
 8004582:	f7ff fee1 	bl	8004348 <_printf_common>
 8004586:	3001      	adds	r0, #1
 8004588:	d14a      	bne.n	8004620 <_printf_i+0x1f4>
 800458a:	f04f 30ff 	mov.w	r0, #4294967295
 800458e:	b004      	add	sp, #16
 8004590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	f043 0320 	orr.w	r3, r3, #32
 800459a:	6023      	str	r3, [r4, #0]
 800459c:	2778      	movs	r7, #120	@ 0x78
 800459e:	4832      	ldr	r0, [pc, #200]	@ (8004668 <_printf_i+0x23c>)
 80045a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	6831      	ldr	r1, [r6, #0]
 80045a8:	061f      	lsls	r7, r3, #24
 80045aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80045ae:	d402      	bmi.n	80045b6 <_printf_i+0x18a>
 80045b0:	065f      	lsls	r7, r3, #25
 80045b2:	bf48      	it	mi
 80045b4:	b2ad      	uxthmi	r5, r5
 80045b6:	6031      	str	r1, [r6, #0]
 80045b8:	07d9      	lsls	r1, r3, #31
 80045ba:	bf44      	itt	mi
 80045bc:	f043 0320 	orrmi.w	r3, r3, #32
 80045c0:	6023      	strmi	r3, [r4, #0]
 80045c2:	b11d      	cbz	r5, 80045cc <_printf_i+0x1a0>
 80045c4:	2310      	movs	r3, #16
 80045c6:	e7ab      	b.n	8004520 <_printf_i+0xf4>
 80045c8:	4826      	ldr	r0, [pc, #152]	@ (8004664 <_printf_i+0x238>)
 80045ca:	e7e9      	b.n	80045a0 <_printf_i+0x174>
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	f023 0320 	bic.w	r3, r3, #32
 80045d2:	6023      	str	r3, [r4, #0]
 80045d4:	e7f6      	b.n	80045c4 <_printf_i+0x198>
 80045d6:	4616      	mov	r6, r2
 80045d8:	e7bd      	b.n	8004556 <_printf_i+0x12a>
 80045da:	6833      	ldr	r3, [r6, #0]
 80045dc:	6825      	ldr	r5, [r4, #0]
 80045de:	1d18      	adds	r0, r3, #4
 80045e0:	6961      	ldr	r1, [r4, #20]
 80045e2:	6030      	str	r0, [r6, #0]
 80045e4:	062e      	lsls	r6, r5, #24
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	d501      	bpl.n	80045ee <_printf_i+0x1c2>
 80045ea:	6019      	str	r1, [r3, #0]
 80045ec:	e002      	b.n	80045f4 <_printf_i+0x1c8>
 80045ee:	0668      	lsls	r0, r5, #25
 80045f0:	d5fb      	bpl.n	80045ea <_printf_i+0x1be>
 80045f2:	8019      	strh	r1, [r3, #0]
 80045f4:	2300      	movs	r3, #0
 80045f6:	4616      	mov	r6, r2
 80045f8:	6123      	str	r3, [r4, #16]
 80045fa:	e7bc      	b.n	8004576 <_printf_i+0x14a>
 80045fc:	6833      	ldr	r3, [r6, #0]
 80045fe:	2100      	movs	r1, #0
 8004600:	1d1a      	adds	r2, r3, #4
 8004602:	6032      	str	r2, [r6, #0]
 8004604:	681e      	ldr	r6, [r3, #0]
 8004606:	6862      	ldr	r2, [r4, #4]
 8004608:	4630      	mov	r0, r6
 800460a:	f000 f97b 	bl	8004904 <memchr>
 800460e:	b108      	cbz	r0, 8004614 <_printf_i+0x1e8>
 8004610:	1b80      	subs	r0, r0, r6
 8004612:	6060      	str	r0, [r4, #4]
 8004614:	6863      	ldr	r3, [r4, #4]
 8004616:	6123      	str	r3, [r4, #16]
 8004618:	2300      	movs	r3, #0
 800461a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800461e:	e7aa      	b.n	8004576 <_printf_i+0x14a>
 8004620:	4632      	mov	r2, r6
 8004622:	4649      	mov	r1, r9
 8004624:	4640      	mov	r0, r8
 8004626:	6923      	ldr	r3, [r4, #16]
 8004628:	47d0      	blx	sl
 800462a:	3001      	adds	r0, #1
 800462c:	d0ad      	beq.n	800458a <_printf_i+0x15e>
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	079b      	lsls	r3, r3, #30
 8004632:	d413      	bmi.n	800465c <_printf_i+0x230>
 8004634:	68e0      	ldr	r0, [r4, #12]
 8004636:	9b03      	ldr	r3, [sp, #12]
 8004638:	4298      	cmp	r0, r3
 800463a:	bfb8      	it	lt
 800463c:	4618      	movlt	r0, r3
 800463e:	e7a6      	b.n	800458e <_printf_i+0x162>
 8004640:	2301      	movs	r3, #1
 8004642:	4632      	mov	r2, r6
 8004644:	4649      	mov	r1, r9
 8004646:	4640      	mov	r0, r8
 8004648:	47d0      	blx	sl
 800464a:	3001      	adds	r0, #1
 800464c:	d09d      	beq.n	800458a <_printf_i+0x15e>
 800464e:	3501      	adds	r5, #1
 8004650:	68e3      	ldr	r3, [r4, #12]
 8004652:	9903      	ldr	r1, [sp, #12]
 8004654:	1a5b      	subs	r3, r3, r1
 8004656:	42ab      	cmp	r3, r5
 8004658:	dcf2      	bgt.n	8004640 <_printf_i+0x214>
 800465a:	e7eb      	b.n	8004634 <_printf_i+0x208>
 800465c:	2500      	movs	r5, #0
 800465e:	f104 0619 	add.w	r6, r4, #25
 8004662:	e7f5      	b.n	8004650 <_printf_i+0x224>
 8004664:	08004a8f 	.word	0x08004a8f
 8004668:	08004aa0 	.word	0x08004aa0

0800466c <__sflush_r>:
 800466c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004672:	0716      	lsls	r6, r2, #28
 8004674:	4605      	mov	r5, r0
 8004676:	460c      	mov	r4, r1
 8004678:	d454      	bmi.n	8004724 <__sflush_r+0xb8>
 800467a:	684b      	ldr	r3, [r1, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	dc02      	bgt.n	8004686 <__sflush_r+0x1a>
 8004680:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004682:	2b00      	cmp	r3, #0
 8004684:	dd48      	ble.n	8004718 <__sflush_r+0xac>
 8004686:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004688:	2e00      	cmp	r6, #0
 800468a:	d045      	beq.n	8004718 <__sflush_r+0xac>
 800468c:	2300      	movs	r3, #0
 800468e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004692:	682f      	ldr	r7, [r5, #0]
 8004694:	6a21      	ldr	r1, [r4, #32]
 8004696:	602b      	str	r3, [r5, #0]
 8004698:	d030      	beq.n	80046fc <__sflush_r+0x90>
 800469a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	0759      	lsls	r1, r3, #29
 80046a0:	d505      	bpl.n	80046ae <__sflush_r+0x42>
 80046a2:	6863      	ldr	r3, [r4, #4]
 80046a4:	1ad2      	subs	r2, r2, r3
 80046a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80046a8:	b10b      	cbz	r3, 80046ae <__sflush_r+0x42>
 80046aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80046ac:	1ad2      	subs	r2, r2, r3
 80046ae:	2300      	movs	r3, #0
 80046b0:	4628      	mov	r0, r5
 80046b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80046b4:	6a21      	ldr	r1, [r4, #32]
 80046b6:	47b0      	blx	r6
 80046b8:	1c43      	adds	r3, r0, #1
 80046ba:	89a3      	ldrh	r3, [r4, #12]
 80046bc:	d106      	bne.n	80046cc <__sflush_r+0x60>
 80046be:	6829      	ldr	r1, [r5, #0]
 80046c0:	291d      	cmp	r1, #29
 80046c2:	d82b      	bhi.n	800471c <__sflush_r+0xb0>
 80046c4:	4a28      	ldr	r2, [pc, #160]	@ (8004768 <__sflush_r+0xfc>)
 80046c6:	410a      	asrs	r2, r1
 80046c8:	07d6      	lsls	r6, r2, #31
 80046ca:	d427      	bmi.n	800471c <__sflush_r+0xb0>
 80046cc:	2200      	movs	r2, #0
 80046ce:	6062      	str	r2, [r4, #4]
 80046d0:	6922      	ldr	r2, [r4, #16]
 80046d2:	04d9      	lsls	r1, r3, #19
 80046d4:	6022      	str	r2, [r4, #0]
 80046d6:	d504      	bpl.n	80046e2 <__sflush_r+0x76>
 80046d8:	1c42      	adds	r2, r0, #1
 80046da:	d101      	bne.n	80046e0 <__sflush_r+0x74>
 80046dc:	682b      	ldr	r3, [r5, #0]
 80046de:	b903      	cbnz	r3, 80046e2 <__sflush_r+0x76>
 80046e0:	6560      	str	r0, [r4, #84]	@ 0x54
 80046e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80046e4:	602f      	str	r7, [r5, #0]
 80046e6:	b1b9      	cbz	r1, 8004718 <__sflush_r+0xac>
 80046e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80046ec:	4299      	cmp	r1, r3
 80046ee:	d002      	beq.n	80046f6 <__sflush_r+0x8a>
 80046f0:	4628      	mov	r0, r5
 80046f2:	f7ff fbf3 	bl	8003edc <_free_r>
 80046f6:	2300      	movs	r3, #0
 80046f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80046fa:	e00d      	b.n	8004718 <__sflush_r+0xac>
 80046fc:	2301      	movs	r3, #1
 80046fe:	4628      	mov	r0, r5
 8004700:	47b0      	blx	r6
 8004702:	4602      	mov	r2, r0
 8004704:	1c50      	adds	r0, r2, #1
 8004706:	d1c9      	bne.n	800469c <__sflush_r+0x30>
 8004708:	682b      	ldr	r3, [r5, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0c6      	beq.n	800469c <__sflush_r+0x30>
 800470e:	2b1d      	cmp	r3, #29
 8004710:	d001      	beq.n	8004716 <__sflush_r+0xaa>
 8004712:	2b16      	cmp	r3, #22
 8004714:	d11d      	bne.n	8004752 <__sflush_r+0xe6>
 8004716:	602f      	str	r7, [r5, #0]
 8004718:	2000      	movs	r0, #0
 800471a:	e021      	b.n	8004760 <__sflush_r+0xf4>
 800471c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004720:	b21b      	sxth	r3, r3
 8004722:	e01a      	b.n	800475a <__sflush_r+0xee>
 8004724:	690f      	ldr	r7, [r1, #16]
 8004726:	2f00      	cmp	r7, #0
 8004728:	d0f6      	beq.n	8004718 <__sflush_r+0xac>
 800472a:	0793      	lsls	r3, r2, #30
 800472c:	bf18      	it	ne
 800472e:	2300      	movne	r3, #0
 8004730:	680e      	ldr	r6, [r1, #0]
 8004732:	bf08      	it	eq
 8004734:	694b      	ldreq	r3, [r1, #20]
 8004736:	1bf6      	subs	r6, r6, r7
 8004738:	600f      	str	r7, [r1, #0]
 800473a:	608b      	str	r3, [r1, #8]
 800473c:	2e00      	cmp	r6, #0
 800473e:	ddeb      	ble.n	8004718 <__sflush_r+0xac>
 8004740:	4633      	mov	r3, r6
 8004742:	463a      	mov	r2, r7
 8004744:	4628      	mov	r0, r5
 8004746:	6a21      	ldr	r1, [r4, #32]
 8004748:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800474c:	47e0      	blx	ip
 800474e:	2800      	cmp	r0, #0
 8004750:	dc07      	bgt.n	8004762 <__sflush_r+0xf6>
 8004752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800475a:	f04f 30ff 	mov.w	r0, #4294967295
 800475e:	81a3      	strh	r3, [r4, #12]
 8004760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004762:	4407      	add	r7, r0
 8004764:	1a36      	subs	r6, r6, r0
 8004766:	e7e9      	b.n	800473c <__sflush_r+0xd0>
 8004768:	dfbffffe 	.word	0xdfbffffe

0800476c <_fflush_r>:
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	690b      	ldr	r3, [r1, #16]
 8004770:	4605      	mov	r5, r0
 8004772:	460c      	mov	r4, r1
 8004774:	b913      	cbnz	r3, 800477c <_fflush_r+0x10>
 8004776:	2500      	movs	r5, #0
 8004778:	4628      	mov	r0, r5
 800477a:	bd38      	pop	{r3, r4, r5, pc}
 800477c:	b118      	cbz	r0, 8004786 <_fflush_r+0x1a>
 800477e:	6a03      	ldr	r3, [r0, #32]
 8004780:	b90b      	cbnz	r3, 8004786 <_fflush_r+0x1a>
 8004782:	f7ff faa3 	bl	8003ccc <__sinit>
 8004786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0f3      	beq.n	8004776 <_fflush_r+0xa>
 800478e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004790:	07d0      	lsls	r0, r2, #31
 8004792:	d404      	bmi.n	800479e <_fflush_r+0x32>
 8004794:	0599      	lsls	r1, r3, #22
 8004796:	d402      	bmi.n	800479e <_fflush_r+0x32>
 8004798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800479a:	f7ff fb9c 	bl	8003ed6 <__retarget_lock_acquire_recursive>
 800479e:	4628      	mov	r0, r5
 80047a0:	4621      	mov	r1, r4
 80047a2:	f7ff ff63 	bl	800466c <__sflush_r>
 80047a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047a8:	4605      	mov	r5, r0
 80047aa:	07da      	lsls	r2, r3, #31
 80047ac:	d4e4      	bmi.n	8004778 <_fflush_r+0xc>
 80047ae:	89a3      	ldrh	r3, [r4, #12]
 80047b0:	059b      	lsls	r3, r3, #22
 80047b2:	d4e1      	bmi.n	8004778 <_fflush_r+0xc>
 80047b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047b6:	f7ff fb8f 	bl	8003ed8 <__retarget_lock_release_recursive>
 80047ba:	e7dd      	b.n	8004778 <_fflush_r+0xc>

080047bc <__swbuf_r>:
 80047bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047be:	460e      	mov	r6, r1
 80047c0:	4614      	mov	r4, r2
 80047c2:	4605      	mov	r5, r0
 80047c4:	b118      	cbz	r0, 80047ce <__swbuf_r+0x12>
 80047c6:	6a03      	ldr	r3, [r0, #32]
 80047c8:	b90b      	cbnz	r3, 80047ce <__swbuf_r+0x12>
 80047ca:	f7ff fa7f 	bl	8003ccc <__sinit>
 80047ce:	69a3      	ldr	r3, [r4, #24]
 80047d0:	60a3      	str	r3, [r4, #8]
 80047d2:	89a3      	ldrh	r3, [r4, #12]
 80047d4:	071a      	lsls	r2, r3, #28
 80047d6:	d501      	bpl.n	80047dc <__swbuf_r+0x20>
 80047d8:	6923      	ldr	r3, [r4, #16]
 80047da:	b943      	cbnz	r3, 80047ee <__swbuf_r+0x32>
 80047dc:	4621      	mov	r1, r4
 80047de:	4628      	mov	r0, r5
 80047e0:	f000 f82a 	bl	8004838 <__swsetup_r>
 80047e4:	b118      	cbz	r0, 80047ee <__swbuf_r+0x32>
 80047e6:	f04f 37ff 	mov.w	r7, #4294967295
 80047ea:	4638      	mov	r0, r7
 80047ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	6922      	ldr	r2, [r4, #16]
 80047f2:	b2f6      	uxtb	r6, r6
 80047f4:	1a98      	subs	r0, r3, r2
 80047f6:	6963      	ldr	r3, [r4, #20]
 80047f8:	4637      	mov	r7, r6
 80047fa:	4283      	cmp	r3, r0
 80047fc:	dc05      	bgt.n	800480a <__swbuf_r+0x4e>
 80047fe:	4621      	mov	r1, r4
 8004800:	4628      	mov	r0, r5
 8004802:	f7ff ffb3 	bl	800476c <_fflush_r>
 8004806:	2800      	cmp	r0, #0
 8004808:	d1ed      	bne.n	80047e6 <__swbuf_r+0x2a>
 800480a:	68a3      	ldr	r3, [r4, #8]
 800480c:	3b01      	subs	r3, #1
 800480e:	60a3      	str	r3, [r4, #8]
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	6022      	str	r2, [r4, #0]
 8004816:	701e      	strb	r6, [r3, #0]
 8004818:	6962      	ldr	r2, [r4, #20]
 800481a:	1c43      	adds	r3, r0, #1
 800481c:	429a      	cmp	r2, r3
 800481e:	d004      	beq.n	800482a <__swbuf_r+0x6e>
 8004820:	89a3      	ldrh	r3, [r4, #12]
 8004822:	07db      	lsls	r3, r3, #31
 8004824:	d5e1      	bpl.n	80047ea <__swbuf_r+0x2e>
 8004826:	2e0a      	cmp	r6, #10
 8004828:	d1df      	bne.n	80047ea <__swbuf_r+0x2e>
 800482a:	4621      	mov	r1, r4
 800482c:	4628      	mov	r0, r5
 800482e:	f7ff ff9d 	bl	800476c <_fflush_r>
 8004832:	2800      	cmp	r0, #0
 8004834:	d0d9      	beq.n	80047ea <__swbuf_r+0x2e>
 8004836:	e7d6      	b.n	80047e6 <__swbuf_r+0x2a>

08004838 <__swsetup_r>:
 8004838:	b538      	push	{r3, r4, r5, lr}
 800483a:	4b29      	ldr	r3, [pc, #164]	@ (80048e0 <__swsetup_r+0xa8>)
 800483c:	4605      	mov	r5, r0
 800483e:	6818      	ldr	r0, [r3, #0]
 8004840:	460c      	mov	r4, r1
 8004842:	b118      	cbz	r0, 800484c <__swsetup_r+0x14>
 8004844:	6a03      	ldr	r3, [r0, #32]
 8004846:	b90b      	cbnz	r3, 800484c <__swsetup_r+0x14>
 8004848:	f7ff fa40 	bl	8003ccc <__sinit>
 800484c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004850:	0719      	lsls	r1, r3, #28
 8004852:	d422      	bmi.n	800489a <__swsetup_r+0x62>
 8004854:	06da      	lsls	r2, r3, #27
 8004856:	d407      	bmi.n	8004868 <__swsetup_r+0x30>
 8004858:	2209      	movs	r2, #9
 800485a:	602a      	str	r2, [r5, #0]
 800485c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004860:	f04f 30ff 	mov.w	r0, #4294967295
 8004864:	81a3      	strh	r3, [r4, #12]
 8004866:	e033      	b.n	80048d0 <__swsetup_r+0x98>
 8004868:	0758      	lsls	r0, r3, #29
 800486a:	d512      	bpl.n	8004892 <__swsetup_r+0x5a>
 800486c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800486e:	b141      	cbz	r1, 8004882 <__swsetup_r+0x4a>
 8004870:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004874:	4299      	cmp	r1, r3
 8004876:	d002      	beq.n	800487e <__swsetup_r+0x46>
 8004878:	4628      	mov	r0, r5
 800487a:	f7ff fb2f 	bl	8003edc <_free_r>
 800487e:	2300      	movs	r3, #0
 8004880:	6363      	str	r3, [r4, #52]	@ 0x34
 8004882:	89a3      	ldrh	r3, [r4, #12]
 8004884:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004888:	81a3      	strh	r3, [r4, #12]
 800488a:	2300      	movs	r3, #0
 800488c:	6063      	str	r3, [r4, #4]
 800488e:	6923      	ldr	r3, [r4, #16]
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	89a3      	ldrh	r3, [r4, #12]
 8004894:	f043 0308 	orr.w	r3, r3, #8
 8004898:	81a3      	strh	r3, [r4, #12]
 800489a:	6923      	ldr	r3, [r4, #16]
 800489c:	b94b      	cbnz	r3, 80048b2 <__swsetup_r+0x7a>
 800489e:	89a3      	ldrh	r3, [r4, #12]
 80048a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80048a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048a8:	d003      	beq.n	80048b2 <__swsetup_r+0x7a>
 80048aa:	4621      	mov	r1, r4
 80048ac:	4628      	mov	r0, r5
 80048ae:	f000 f85c 	bl	800496a <__smakebuf_r>
 80048b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048b6:	f013 0201 	ands.w	r2, r3, #1
 80048ba:	d00a      	beq.n	80048d2 <__swsetup_r+0x9a>
 80048bc:	2200      	movs	r2, #0
 80048be:	60a2      	str	r2, [r4, #8]
 80048c0:	6962      	ldr	r2, [r4, #20]
 80048c2:	4252      	negs	r2, r2
 80048c4:	61a2      	str	r2, [r4, #24]
 80048c6:	6922      	ldr	r2, [r4, #16]
 80048c8:	b942      	cbnz	r2, 80048dc <__swsetup_r+0xa4>
 80048ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80048ce:	d1c5      	bne.n	800485c <__swsetup_r+0x24>
 80048d0:	bd38      	pop	{r3, r4, r5, pc}
 80048d2:	0799      	lsls	r1, r3, #30
 80048d4:	bf58      	it	pl
 80048d6:	6962      	ldrpl	r2, [r4, #20]
 80048d8:	60a2      	str	r2, [r4, #8]
 80048da:	e7f4      	b.n	80048c6 <__swsetup_r+0x8e>
 80048dc:	2000      	movs	r0, #0
 80048de:	e7f7      	b.n	80048d0 <__swsetup_r+0x98>
 80048e0:	20000018 	.word	0x20000018

080048e4 <_sbrk_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	2300      	movs	r3, #0
 80048e8:	4d05      	ldr	r5, [pc, #20]	@ (8004900 <_sbrk_r+0x1c>)
 80048ea:	4604      	mov	r4, r0
 80048ec:	4608      	mov	r0, r1
 80048ee:	602b      	str	r3, [r5, #0]
 80048f0:	f7fb fec2 	bl	8000678 <_sbrk>
 80048f4:	1c43      	adds	r3, r0, #1
 80048f6:	d102      	bne.n	80048fe <_sbrk_r+0x1a>
 80048f8:	682b      	ldr	r3, [r5, #0]
 80048fa:	b103      	cbz	r3, 80048fe <_sbrk_r+0x1a>
 80048fc:	6023      	str	r3, [r4, #0]
 80048fe:	bd38      	pop	{r3, r4, r5, pc}
 8004900:	20000290 	.word	0x20000290

08004904 <memchr>:
 8004904:	4603      	mov	r3, r0
 8004906:	b510      	push	{r4, lr}
 8004908:	b2c9      	uxtb	r1, r1
 800490a:	4402      	add	r2, r0
 800490c:	4293      	cmp	r3, r2
 800490e:	4618      	mov	r0, r3
 8004910:	d101      	bne.n	8004916 <memchr+0x12>
 8004912:	2000      	movs	r0, #0
 8004914:	e003      	b.n	800491e <memchr+0x1a>
 8004916:	7804      	ldrb	r4, [r0, #0]
 8004918:	3301      	adds	r3, #1
 800491a:	428c      	cmp	r4, r1
 800491c:	d1f6      	bne.n	800490c <memchr+0x8>
 800491e:	bd10      	pop	{r4, pc}

08004920 <__swhatbuf_r>:
 8004920:	b570      	push	{r4, r5, r6, lr}
 8004922:	460c      	mov	r4, r1
 8004924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004928:	4615      	mov	r5, r2
 800492a:	2900      	cmp	r1, #0
 800492c:	461e      	mov	r6, r3
 800492e:	b096      	sub	sp, #88	@ 0x58
 8004930:	da0c      	bge.n	800494c <__swhatbuf_r+0x2c>
 8004932:	89a3      	ldrh	r3, [r4, #12]
 8004934:	2100      	movs	r1, #0
 8004936:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800493a:	bf14      	ite	ne
 800493c:	2340      	movne	r3, #64	@ 0x40
 800493e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004942:	2000      	movs	r0, #0
 8004944:	6031      	str	r1, [r6, #0]
 8004946:	602b      	str	r3, [r5, #0]
 8004948:	b016      	add	sp, #88	@ 0x58
 800494a:	bd70      	pop	{r4, r5, r6, pc}
 800494c:	466a      	mov	r2, sp
 800494e:	f000 f849 	bl	80049e4 <_fstat_r>
 8004952:	2800      	cmp	r0, #0
 8004954:	dbed      	blt.n	8004932 <__swhatbuf_r+0x12>
 8004956:	9901      	ldr	r1, [sp, #4]
 8004958:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800495c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004960:	4259      	negs	r1, r3
 8004962:	4159      	adcs	r1, r3
 8004964:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004968:	e7eb      	b.n	8004942 <__swhatbuf_r+0x22>

0800496a <__smakebuf_r>:
 800496a:	898b      	ldrh	r3, [r1, #12]
 800496c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800496e:	079d      	lsls	r5, r3, #30
 8004970:	4606      	mov	r6, r0
 8004972:	460c      	mov	r4, r1
 8004974:	d507      	bpl.n	8004986 <__smakebuf_r+0x1c>
 8004976:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800497a:	6023      	str	r3, [r4, #0]
 800497c:	6123      	str	r3, [r4, #16]
 800497e:	2301      	movs	r3, #1
 8004980:	6163      	str	r3, [r4, #20]
 8004982:	b003      	add	sp, #12
 8004984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004986:	466a      	mov	r2, sp
 8004988:	ab01      	add	r3, sp, #4
 800498a:	f7ff ffc9 	bl	8004920 <__swhatbuf_r>
 800498e:	9f00      	ldr	r7, [sp, #0]
 8004990:	4605      	mov	r5, r0
 8004992:	4639      	mov	r1, r7
 8004994:	4630      	mov	r0, r6
 8004996:	f7ff fb0b 	bl	8003fb0 <_malloc_r>
 800499a:	b948      	cbnz	r0, 80049b0 <__smakebuf_r+0x46>
 800499c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049a0:	059a      	lsls	r2, r3, #22
 80049a2:	d4ee      	bmi.n	8004982 <__smakebuf_r+0x18>
 80049a4:	f023 0303 	bic.w	r3, r3, #3
 80049a8:	f043 0302 	orr.w	r3, r3, #2
 80049ac:	81a3      	strh	r3, [r4, #12]
 80049ae:	e7e2      	b.n	8004976 <__smakebuf_r+0xc>
 80049b0:	89a3      	ldrh	r3, [r4, #12]
 80049b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80049b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ba:	81a3      	strh	r3, [r4, #12]
 80049bc:	9b01      	ldr	r3, [sp, #4]
 80049be:	6020      	str	r0, [r4, #0]
 80049c0:	b15b      	cbz	r3, 80049da <__smakebuf_r+0x70>
 80049c2:	4630      	mov	r0, r6
 80049c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049c8:	f000 f81e 	bl	8004a08 <_isatty_r>
 80049cc:	b128      	cbz	r0, 80049da <__smakebuf_r+0x70>
 80049ce:	89a3      	ldrh	r3, [r4, #12]
 80049d0:	f023 0303 	bic.w	r3, r3, #3
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	81a3      	strh	r3, [r4, #12]
 80049da:	89a3      	ldrh	r3, [r4, #12]
 80049dc:	431d      	orrs	r5, r3
 80049de:	81a5      	strh	r5, [r4, #12]
 80049e0:	e7cf      	b.n	8004982 <__smakebuf_r+0x18>
	...

080049e4 <_fstat_r>:
 80049e4:	b538      	push	{r3, r4, r5, lr}
 80049e6:	2300      	movs	r3, #0
 80049e8:	4d06      	ldr	r5, [pc, #24]	@ (8004a04 <_fstat_r+0x20>)
 80049ea:	4604      	mov	r4, r0
 80049ec:	4608      	mov	r0, r1
 80049ee:	4611      	mov	r1, r2
 80049f0:	602b      	str	r3, [r5, #0]
 80049f2:	f7fb fe1b 	bl	800062c <_fstat>
 80049f6:	1c43      	adds	r3, r0, #1
 80049f8:	d102      	bne.n	8004a00 <_fstat_r+0x1c>
 80049fa:	682b      	ldr	r3, [r5, #0]
 80049fc:	b103      	cbz	r3, 8004a00 <_fstat_r+0x1c>
 80049fe:	6023      	str	r3, [r4, #0]
 8004a00:	bd38      	pop	{r3, r4, r5, pc}
 8004a02:	bf00      	nop
 8004a04:	20000290 	.word	0x20000290

08004a08 <_isatty_r>:
 8004a08:	b538      	push	{r3, r4, r5, lr}
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	4d05      	ldr	r5, [pc, #20]	@ (8004a24 <_isatty_r+0x1c>)
 8004a0e:	4604      	mov	r4, r0
 8004a10:	4608      	mov	r0, r1
 8004a12:	602b      	str	r3, [r5, #0]
 8004a14:	f7fb fe19 	bl	800064a <_isatty>
 8004a18:	1c43      	adds	r3, r0, #1
 8004a1a:	d102      	bne.n	8004a22 <_isatty_r+0x1a>
 8004a1c:	682b      	ldr	r3, [r5, #0]
 8004a1e:	b103      	cbz	r3, 8004a22 <_isatty_r+0x1a>
 8004a20:	6023      	str	r3, [r4, #0]
 8004a22:	bd38      	pop	{r3, r4, r5, pc}
 8004a24:	20000290 	.word	0x20000290

08004a28 <_init>:
 8004a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2a:	bf00      	nop
 8004a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2e:	bc08      	pop	{r3}
 8004a30:	469e      	mov	lr, r3
 8004a32:	4770      	bx	lr

08004a34 <_fini>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	bf00      	nop
 8004a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3a:	bc08      	pop	{r3}
 8004a3c:	469e      	mov	lr, r3
 8004a3e:	4770      	bx	lr
